/*!
 * This file is part of ReSampled SoundBox.
 *
 * Based on SoundBox by Marcus Geelnard (c) 2011-2013
 * 2016 pointofpresence
 * ReSampled.SoundBox (resampled-sound-box) - Online music tracker
 *
 * @version v0.0.1
 * @build Thu Feb 04 2016 00:56:11
 * @link https://github.com/pointofpresence/resampled-sound-box
 * @license GPL-3.0
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 *
 * 3. This notice may not be removed or altered from any source
 *    distribution.
 */
function rle_encode(t){var e,n,i,r,o="";for(e=0;e<t.length;){for(i=t.charCodeAt(e),n=1;255>n&&e+n<t.length&&(r=t.charCodeAt(e+n),r==i);n++);n>3?(o+=String.fromCharCode(254),o+=String.fromCharCode(n),o+=String.fromCharCode(i)):(o+=String.fromCharCode(i),254==i&&(o+=String.fromCharCode(0)),n=1),e+=n}return o}function rle_decode(t){var e,n,i,r,o="";for(e=0;e<t.length;){if(i=t.charCodeAt(e++),254===i){if(1>e)break;if(r=t.charCodeAt(e++),0!=r){if(1>e)break;for(i=t.charCodeAt(e++),n=0;r>n;n++)o+=String.fromCharCode(i);continue}}o+=String.fromCharCode(i)}return o}if(function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e="length"in t&&t.length,n=Z.type(t);return"function"===n||Z.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function i(t,e,n){if(Z.isFunction(e))return Z.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return Z.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(at.test(e))return Z.filter(e,t,n);e=Z.filter(e,t)}return Z.grep(t,function(t){return q.call(e,t)>=0!==n})}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e=pt[t]={};return Z.each(t.match(ht)||[],function(t,n){e[n]=!0}),e}function s(){J.removeEventListener("DOMContentLoaded",s,!1),t.removeEventListener("load",s,!1),Z.ready()}function a(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=Z.expando+a.uid++}function l(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(wt,"-$1").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:bt.test(n)?Z.parseJSON(n):n}catch(r){}yt.set(t,e,n)}else n=void 0;return n}function c(){return!0}function u(){return!1}function d(){try{return J.activeElement}catch(t){}}function f(t,e){return Z.nodeName(t,"table")&&Z.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function h(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function p(t){var e=Rt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function g(t,e){for(var n=0,i=t.length;i>n;n++)vt.set(t[n],"globalEval",!e||vt.get(e[n],"globalEval"))}function m(t,e){var n,i,r,o,s,a,l,c;if(1===e.nodeType){if(vt.hasData(t)&&(o=vt.access(t),s=vt.set(e,o),c=o.events)){delete s.handle,s.events={};for(r in c)for(n=0,i=c[r].length;i>n;n++)Z.event.add(e,r,c[r][n])}yt.hasData(t)&&(a=yt.access(t),l=Z.extend({},a),yt.set(e,l))}}function v(t,e){var n=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&Z.nodeName(t,e)?Z.merge([t],n):n}function y(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Ct.test(t.type)?e.checked=t.checked:("input"===n||"textarea"===n)&&(e.defaultValue=t.defaultValue)}function b(e,n){var i,r=Z(n.createElement(e)).appendTo(n.body),o=t.getDefaultComputedStyle&&(i=t.getDefaultComputedStyle(r[0]))?i.display:Z.css(r[0],"display");return r.detach(),o}function w(t){var e=J,n=Ut[t];return n||(n=b(t,e),"none"!==n&&n||(Mt=(Mt||Z("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Mt[0].contentDocument,e.write(),e.close(),n=b(t,e),Mt.detach()),Ut[t]=n),n}function E(t,e,n){var i,r,o,s,a=t.style;return n=n||Vt(t),n&&(s=n.getPropertyValue(e)||n[e]),n&&(""!==s||Z.contains(t.ownerDocument,t)||(s=Z.style(t,e)),Xt.test(s)&&jt.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function x(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function T(t,e){if(e in t)return e;for(var n=e[0].toUpperCase()+e.slice(1),i=e,r=Qt.length;r--;)if(e=Qt[r]+n,e in t)return e;return i}function C(t,e,n){var i=Ht.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function S(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=Z.css(t,n+xt[o],!0,r)),i?("content"===n&&(s-=Z.css(t,"padding"+xt[o],!0,r)),"margin"!==n&&(s-=Z.css(t,"border"+xt[o]+"Width",!0,r))):(s+=Z.css(t,"padding"+xt[o],!0,r),"padding"!==n&&(s+=Z.css(t,"border"+xt[o]+"Width",!0,r)));return s}function _(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=Vt(t),s="border-box"===Z.css(t,"boxSizing",!1,o);if(0>=r||null==r){if(r=E(t,e,o),(0>r||null==r)&&(r=t.style[e]),Xt.test(r))return r;i=s&&(G.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+S(t,e,n||(s?"border":"content"),i,o)+"px"}function I(t,e){for(var n,i,r,o=[],s=0,a=t.length;a>s;s++)i=t[s],i.style&&(o[s]=vt.get(i,"olddisplay"),n=i.style.display,e?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Tt(i)&&(o[s]=vt.access(i,"olddisplay",w(i.nodeName)))):(r=Tt(i),"none"===n&&r||vt.set(i,"olddisplay",r?n:Z.css(i,"display"))));for(s=0;a>s;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[s]||"":"none"));return t}function D(t,e,n,i,r){return new D.prototype.init(t,e,n,i,r)}function O(){return setTimeout(function(){Gt=void 0}),Gt=Z.now()}function A(t,e){var n,i=0,r={height:t};for(e=e?1:0;4>i;i+=2-e)n=xt[i],r["margin"+n]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function L(t,e,n){for(var i,r=(ne[e]||[]).concat(ne["*"]),o=0,s=r.length;s>o;o++)if(i=r[o].call(n,e,t))return i}function N(t,e,n){var i,r,o,s,a,l,c,u,d=this,f={},h=t.style,p=t.nodeType&&Tt(t),g=vt.get(t,"fxshow");n.queue||(a=Z._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,Z.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=Z.css(t,"display"),u="none"===c?vt.get(t,"olddisplay")||w(t.nodeName):c,"inline"===u&&"none"===Z.css(t,"float")&&(h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],Kt.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;p=!0}f[i]=g&&g[i]||Z.style(t,i)}else c=void 0;if(Z.isEmptyObject(f))"inline"===("none"===c?w(t.nodeName):c)&&(h.display=c);else{g?"hidden"in g&&(p=g.hidden):g=vt.access(t,"fxshow",{}),o&&(g.hidden=!p),p?Z(t).show():d.done(function(){Z(t).hide()}),d.done(function(){var e;vt.remove(t,"fxshow");for(e in f)Z.style(t,e,f[e])});for(i in f)s=L(p?g[i]:0,i,d),i in g||(g[i]=s.start,p&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function P(t,e){var n,i,r,o,s;for(n in t)if(i=Z.camelCase(n),r=e[i],o=t[n],Z.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),s=Z.cssHooks[i],s&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function k(t,e,n){var i,r,o=0,s=ee.length,a=Z.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=Gt||O(),n=Math.max(0,c.startTime+c.duration-e),i=n/c.duration||0,o=1-i,s=0,l=c.tweens.length;l>s;s++)c.tweens[s].run(o);return a.notifyWith(t,[c,o,n]),1>o&&l?n:(a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:Z.extend({},e),opts:Z.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Gt||O(),duration:n.duration,tweens:[],createTween:function(e,n){var i=Z.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)c.tweens[n].run(1);return e?a.resolveWith(t,[c,e]):a.rejectWith(t,[c,e]),this}}),u=c.props;for(P(u,c.opts.specialEasing);s>o;o++)if(i=ee[o].call(c,t,u,c.opts))return i;return Z.map(u,L,c),Z.isFunction(c.opts.start)&&c.opts.start.call(t,c),Z.fx.timer(Z.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function $(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(ht)||[];if(Z.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function R(t,e,n,i){function r(a){var l;return o[a]=!0,Z.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)}),l}var o={},s=t===be;return r(e.dataTypes[0])||!o["*"]&&r("*")}function B(t,e){var n,i,r=Z.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&Z.extend(!0,t,i),t}function F(t,e,n){for(var i,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function M(t,e,n,i){var r,o,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(s=c[l+" "+o]||c["* "+o],!s)for(r in c)if(a=r.split(" "),a[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){s===!0?s=c[r]:c[r]!==!0&&(o=a[0],u.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(d){return{state:"parsererror",error:s?d:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function U(t,e,n,i){var r;if(Z.isArray(e))Z.each(e,function(e,r){n||Ce.test(t)?i(t,r):U(t+"["+("object"==typeof r?e:"")+"]",r,n,i)});else if(n||"object"!==Z.type(e))i(t,e);else for(r in e)U(t+"["+r+"]",e[r],n,i)}function j(t){return Z.isWindow(t)?t:9===t.nodeType&&t.defaultView}var X=[],V=X.slice,Y=X.concat,H=X.push,q=X.indexOf,W={},z=W.toString,Q=W.hasOwnProperty,G={},J=t.document,K="2.1.4",Z=function(t,e){return new Z.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,nt=/-([\da-z])/gi,it=function(t,e){return e.toUpperCase()};Z.fn=Z.prototype={jquery:K,constructor:Z,selector:"",length:0,toArray:function(){return V.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:V.call(this)},pushStack:function(t){var e=Z.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return Z.each(this,t,e)},map:function(t){return this.pushStack(Z.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(V.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:H,sort:X.sort,splice:X.splice},Z.extend=Z.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||Z.isFunction(s)||(s={}),a===l&&(s=this,a--);l>a;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],i=t[e],s!==i&&(c&&i&&(Z.isPlainObject(i)||(r=Z.isArray(i)))?(r?(r=!1,o=n&&Z.isArray(n)?n:[]):o=n&&Z.isPlainObject(n)?n:{},s[e]=Z.extend(c,o,i)):void 0!==i&&(s[e]=i));return s},Z.extend({expando:"jQuery"+(K+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===Z.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!Z.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"!==Z.type(t)||t.nodeType||Z.isWindow(t)?!1:t.constructor&&!Q.call(t.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?W[z.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=Z.trim(t),t&&(1===t.indexOf("use strict")?(e=J.createElement("script"),e.text=t,J.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(et,"ms-").replace(nt,it)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var r,o=0,s=t.length,a=n(t);if(i){if(a)for(;s>o&&(r=e.apply(t[o],i),r!==!1);o++);else for(o in t)if(r=e.apply(t[o],i),r===!1)break}else if(a)for(;s>o&&(r=e.call(t[o],o,t[o]),r!==!1);o++);else for(o in t)if(r=e.call(t[o],o,t[o]),r===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?Z.merge(i,"string"==typeof t?[t]:t):H.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:q.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;n>i;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],o=0,s=t.length,a=!n;s>o;o++)i=!e(t[o],o),i!==a&&r.push(t[o]);return r},map:function(t,e,i){var r,o=0,s=t.length,a=n(t),l=[];if(a)for(;s>o;o++)r=e(t[o],o,i),null!=r&&l.push(r);else for(o in t)r=e(t[o],o,i),null!=r&&l.push(r);return Y.apply([],l)},guid:1,proxy:function(t,e){var n,i,r;return"string"==typeof e&&(n=t[e],e=t,t=n),Z.isFunction(t)?(i=V.call(arguments,2),r=function(){return t.apply(e||this,i.concat(V.call(arguments)))},r.guid=t.guid=t.guid||Z.guid++,r):void 0},now:Date.now,support:G}),Z.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){W["[object "+e+"]"]=e.toLowerCase()});var rt=function(t){function e(t,e,n,i){var r,o,s,a,l,c,d,h,p,g;if((e?e.ownerDocument||e:U)!==N&&L(e),e=e||N,n=n||[],a=e.nodeType,"string"!=typeof t||!t||1!==a&&9!==a&&11!==a)return n;if(!i&&k){if(11!==a&&(r=yt.exec(t)))if(s=r[1]){if(9===a){if(o=e.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(e.ownerDocument&&(o=e.ownerDocument.getElementById(s))&&F(e,o)&&o.id===s)return n.push(o),n}else{if(r[2])return K.apply(n,e.getElementsByTagName(t)),n;if((s=r[3])&&E.getElementsByClassName)return K.apply(n,e.getElementsByClassName(s)),n}if(E.qsa&&(!$||!$.test(t))){if(h=d=M,p=e,g=1!==a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(c=S(t),(d=e.getAttribute("id"))?h=d.replace(wt,"\\$&"):e.setAttribute("id",h),h="[id='"+h+"'] ",l=c.length;l--;)c[l]=h+f(c[l]);p=bt.test(t)&&u(e.parentNode)||e,g=c.join(",")}if(g)try{return K.apply(n,p.querySelectorAll(g)),n}catch(m){}finally{d||e.removeAttribute("id")}}}return I(t.replace(lt,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[M]=!0,t}function r(t){var e=N.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=t.length;i--;)x.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||W)-(~t.sourceIndex||W);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function u(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function d(){}function f(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function h(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=X++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,s){var a,l,c=[j,o];if(s){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(l=e[M]||(e[M]={}),(a=l[i])&&a[0]===j&&a[1]===o)return c[2]=a[2];if(l[i]=c,c[2]=t(e,n,s))return!0}}}function p(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function g(t,n,i){for(var r=0,o=n.length;o>r;r++)e(t,n[r],i);return i}function m(t,e,n,i,r){for(var o,s=[],a=0,l=t.length,c=null!=e;l>a;a++)(o=t[a])&&(!n||n(o,i,r))&&(s.push(o),c&&e.push(a));return s}function v(t,e,n,r,o,s){return r&&!r[M]&&(r=v(r)),o&&!o[M]&&(o=v(o,s)),i(function(i,s,a,l){var c,u,d,f=[],h=[],p=s.length,v=i||g(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?v:m(v,f,t,a,l),b=n?o||(i?t:p||r)?[]:s:y;if(n&&n(y,b,a,l),r)for(c=m(b,h),r(c,[],a,l),u=c.length;u--;)(d=c[u])&&(b[h[u]]=!(y[h[u]]=d));if(i){if(o||t){if(o){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);o(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=o?tt(i,d):f[u])>-1&&(i[c]=!(s[c]=d))}}else b=m(b===s?b.splice(p,b.length):b),o?o(null,s,b,l):K.apply(s,b)})}function y(t){for(var e,n,i,r=t.length,o=x.relative[t[0].type],s=o||x.relative[" "],a=o?1:0,l=h(function(t){return t===e},s,!0),c=h(function(t){return tt(e,t)>-1},s,!0),u=[function(t,n,i){var r=!o&&(i||n!==D)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,r}];r>a;a++)if(n=x.relative[t[a].type])u=[h(p(u),n)];else{if(n=x.filter[t[a].type].apply(null,t[a].matches),n[M]){for(i=++a;r>i&&!x.relative[t[i].type];i++);return v(a>1&&p(u),a>1&&f(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(lt,"$1"),n,i>a&&y(t.slice(a,i)),r>i&&y(t=t.slice(i)),r>i&&f(t))}u.push(n)}return p(u)}function b(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,l,c){var u,d,f,h=0,p="0",g=i&&[],v=[],y=D,b=i||o&&x.find.TAG("*",c),w=j+=null==y?1:Math.random()||.1,E=b.length;for(c&&(D=s!==N&&s);p!==E&&null!=(u=b[p]);p++){if(o&&u){for(d=0;f=t[d++];)if(f(u,s,a)){l.push(u);break}c&&(j=w)}r&&((u=!f&&u)&&h--,i&&g.push(u))}if(h+=p,r&&p!==h){for(d=0;f=n[d++];)f(g,v,s,a);if(i){if(h>0)for(;p--;)g[p]||v[p]||(v[p]=G.call(l));v=m(v)}K.apply(l,v),c&&!i&&v.length>0&&h+n.length>1&&e.uniqueSort(l)}return c&&(j=w,D=y),g};return r?i(s):s}var w,E,x,T,C,S,_,I,D,O,A,L,N,P,k,$,R,B,F,M="sizzle"+1*new Date,U=t.document,j=0,X=0,V=n(),Y=n(),H=n(),q=function(t,e){return t===e&&(A=!0),0},W=1<<31,z={}.hasOwnProperty,Q=[],G=Q.pop,J=Q.push,K=Q.push,Z=Q.slice,tt=function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",rt=it.replace("w","w#"),ot="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",st=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),lt=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ct=new RegExp("^"+nt+"*,"+nt+"*"),ut=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),dt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ft=new RegExp(st),ht=new RegExp("^"+rt+"$"),pt={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it.replace("w","w*")+")"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,bt=/[+~]/,wt=/'|\\/g,Et=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),xt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},Tt=function(){L()};try{K.apply(Q=Z.call(U.childNodes),U.childNodes),Q[U.childNodes.length].nodeType}catch(Ct){K={apply:Q.length?function(t,e){J.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}E=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},L=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:U;return i!==N&&9===i.nodeType&&i.documentElement?(N=i,P=i.documentElement,n=i.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Tt,!1):n.attachEvent&&n.attachEvent("onunload",Tt)),k=!C(i),E.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),E.getElementsByTagName=r(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),E.getElementsByClassName=vt.test(i.getElementsByClassName),E.getById=r(function(t){return P.appendChild(t).id=M,!i.getElementsByName||!i.getElementsByName(M).length}),E.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&k){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},x.filter.ID=function(t){var e=t.replace(Et,xt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(Et,xt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),x.find.TAG=E.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):E.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},x.find.CLASS=E.getElementsByClassName&&function(t,e){return k?e.getElementsByClassName(t):void 0},R=[],$=[],(E.qsa=vt.test(i.querySelectorAll))&&(r(function(t){P.appendChild(t).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&$.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||$.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+M+"-]").length||$.push("~="),t.querySelectorAll(":checked").length||$.push(":checked"),t.querySelectorAll("a#"+M+"+*").length||$.push(".#.+[+~]")}),r(function(t){var e=i.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&$.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||$.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),$.push(",.*:")})),(E.matchesSelector=vt.test(B=P.matches||P.webkitMatchesSelector||P.mozMatchesSelector||P.oMatchesSelector||P.msMatchesSelector))&&r(function(t){E.disconnectedMatch=B.call(t,"div"),B.call(t,"[s!='']:x"),R.push("!=",st)}),$=$.length&&new RegExp($.join("|")),R=R.length&&new RegExp(R.join("|")),e=vt.test(P.compareDocumentPosition),F=e||vt.test(P.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},q=e?function(t,e){if(t===e)return A=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!E.sortDetached&&e.compareDocumentPosition(t)===n?t===i||t.ownerDocument===U&&F(U,t)?-1:e===i||e.ownerDocument===U&&F(U,e)?1:O?tt(O,t)-tt(O,e):0:4&n?-1:1)}:function(t,e){if(t===e)return A=!0,0;var n,r=0,o=t.parentNode,a=e.parentNode,l=[t],c=[e];if(!o||!a)return t===i?-1:e===i?1:o?-1:a?1:O?tt(O,t)-tt(O,e):0;if(o===a)return s(t,e);for(n=t;n=n.parentNode;)l.unshift(n);for(n=e;n=n.parentNode;)c.unshift(n);for(;l[r]===c[r];)r++;return r?s(l[r],c[r]):l[r]===U?-1:c[r]===U?1:0},i):N},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==N&&L(t),n=n.replace(dt,"='$1']"),!(!E.matchesSelector||!k||R&&R.test(n)||$&&$.test(n)))try{var i=B.call(t,n);if(i||E.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(r){}return e(n,N,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==N&&L(t),F(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==N&&L(t);var n=x.attrHandle[e.toLowerCase()],i=n&&z.call(x.attrHandle,e.toLowerCase())?n(t,e,!k):void 0;return void 0!==i?i:E.attributes||!k?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(A=!E.detectDuplicates,O=!E.sortStable&&t.slice(0),t.sort(q),A){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return O=null,t},T=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=T(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=T(e);return n},x=e.selectors={cacheLength:50,createPseudo:i,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Et,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(Et,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ft.test(n)&&(e=S(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Et,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=V[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&V(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:n?(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(at," ")+" ").indexOf(i)>-1:"|="===n?o===i||o.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var c,u,d,f,h,p,g=o!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a;if(m){if(o){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&y){for(u=m[M]||(m[M]={}),c=u[t]||[],h=c[0]===j&&c[1],f=c[0]===j&&c[2],d=h&&m.childNodes[h];d=++h&&d&&d[g]||(f=h=0)||p.pop();)if(1===d.nodeType&&++f&&d===e){u[t]=[j,h,f];break}}else if(y&&(c=(e[M]||(e[M]={}))[t])&&c[0]===j)f=c[1];else for(;(d=++h&&d&&d[g]||(f=h=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++f||(y&&((d[M]||(d[M]={}))[t]=[j,f]),d!==e)););return f-=r,f===i||f%i===0&&f/i>=0}}},PSEUDO:function(t,n){var r,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[M]?o(n):o.length>1?(r=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)i=tt(t,r[s]),t[i]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=_(t.replace(lt,"$1"));return r[M]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(Et,xt),function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:i(function(t){return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(Et,xt).toLowerCase(),function(e){var n;do if(n=k?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===P},focus:function(t){return t===N.activeElement&&(!N.hasFocus||N.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return gt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[0>n?n+e:n]}),even:c(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:c(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}},x.pseudos.nth=x.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})x.pseudos[w]=l(w);return d.prototype=x.filters=x.pseudos,x.setFilters=new d,S=e.tokenize=function(t,n){var i,r,o,s,a,l,c,u=Y[t+" "];if(u)return n?0:u.slice(0);for(a=t,l=[],c=x.preFilter;a;){(!i||(r=ct.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=ut.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(lt," ")}),a=a.slice(i.length));for(s in x.filter)!(r=pt[s].exec(a))||c[s]&&!(r=c[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):Y(t,l).slice(0)},_=e.compile=function(t,e){var n,i=[],r=[],o=H[t+" "];if(!o){for(e||(e=S(t)),n=e.length;n--;)o=y(e[n]),o[M]?i.push(o):r.push(o);o=H(t,b(r,i)),o.selector=t}return o},I=e.select=function(t,e,n,i){var r,o,s,a,l,c="function"==typeof t&&t,d=!i&&S(t=c.selector||t);if(n=n||[],1===d.length){if(o=d[0]=d[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&E.getById&&9===e.nodeType&&k&&x.relative[o[1].type]){if(e=(x.find.ID(s.matches[0].replace(Et,xt),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=pt.needsContext.test(t)?0:o.length;r--&&(s=o[r],!x.relative[a=s.type]);)if((l=x.find[a])&&(i=l(s.matches[0].replace(Et,xt),bt.test(o[0].type)&&u(e.parentNode)||e))){if(o.splice(r,1),t=i.length&&f(o),!t)return K.apply(n,i),n;break}}return(c||_(t,d))(i,e,!k,n,bt.test(t)&&u(e.parentNode)||e),n},E.sortStable=M.split("").sort(q).join("")===M,E.detectDuplicates=!!A,L(),E.sortDetached=r(function(t){return 1&t.compareDocumentPosition(N.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),E.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var i;return n?void 0:t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null;

}),e}(t);Z.find=rt,Z.expr=rt.selectors,Z.expr[":"]=Z.expr.pseudos,Z.unique=rt.uniqueSort,Z.text=rt.getText,Z.isXMLDoc=rt.isXML,Z.contains=rt.contains;var ot=Z.expr.match.needsContext,st=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,at=/^.[^:#\[\.,]*$/;Z.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?Z.find.matchesSelector(i,t)?[i]:[]:Z.find.matches(t,Z.grep(e,function(t){return 1===t.nodeType}))},Z.fn.extend({find:function(t){var e,n=this.length,i=[],r=this;if("string"!=typeof t)return this.pushStack(Z(t).filter(function(){for(e=0;n>e;e++)if(Z.contains(r[e],this))return!0}));for(e=0;n>e;e++)Z.find(t,r[e],i);return i=this.pushStack(n>1?Z.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&ot.test(t)?Z(t):t||[],!1).length}});var lt,ct=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ut=Z.fn.init=function(t,e){var n,i;if(!t)return this;if("string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ct.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||lt).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof Z?e[0]:e,Z.merge(this,Z.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:J,!0)),st.test(n[1])&&Z.isPlainObject(e))for(n in e)Z.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return i=J.getElementById(n[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=J,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):Z.isFunction(t)?"undefined"!=typeof lt.ready?lt.ready(t):t(Z):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),Z.makeArray(t,this))};ut.prototype=Z.fn,lt=Z(J);var dt=/^(?:parents|prev(?:Until|All))/,ft={children:!0,contents:!0,next:!0,prev:!0};Z.extend({dir:function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&Z(t).is(n))break;i.push(t)}return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),Z.fn.extend({has:function(t){var e=Z(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(Z.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,o=[],s=ot.test(t)||"string"!=typeof t?Z(t,e||this.context):0;r>i;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&Z.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?Z.unique(o):o)},index:function(t){return t?"string"==typeof t?q.call(Z(t),this[0]):q.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(Z.unique(Z.merge(this.get(),Z(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),Z.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return Z.dir(t,"parentNode")},parentsUntil:function(t,e,n){return Z.dir(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return Z.dir(t,"nextSibling")},prevAll:function(t){return Z.dir(t,"previousSibling")},nextUntil:function(t,e,n){return Z.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return Z.dir(t,"previousSibling",n)},siblings:function(t){return Z.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return Z.sibling(t.firstChild)},contents:function(t){return t.contentDocument||Z.merge([],t.childNodes)}},function(t,e){Z.fn[t]=function(n,i){var r=Z.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=Z.filter(i,r)),this.length>1&&(ft[t]||Z.unique(r),dt.test(t)&&r.reverse()),this.pushStack(r)}});var ht=/\S+/g,pt={};Z.Callbacks=function(t){t="string"==typeof t?pt[t]||o(t):Z.extend({},t);var e,n,i,r,s,a,l=[],c=!t.once&&[],u=function(o){for(e=t.memory&&o,n=!0,a=r||0,r=0,s=l.length,i=!0;l&&s>a;a++)if(l[a].apply(o[0],o[1])===!1&&t.stopOnFalse){e=!1;break}i=!1,l&&(c?c.length&&u(c.shift()):e?l=[]:d.disable())},d={add:function(){if(l){var n=l.length;!function o(e){Z.each(e,function(e,n){var i=Z.type(n);"function"===i?t.unique&&d.has(n)||l.push(n):n&&n.length&&"string"!==i&&o(n)})}(arguments),i?s=l.length:e&&(r=n,u(e))}return this},remove:function(){return l&&Z.each(arguments,function(t,e){for(var n;(n=Z.inArray(e,l,n))>-1;)l.splice(n,1),i&&(s>=n&&s--,a>=n&&a--)}),this},has:function(t){return t?Z.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],s=0,this},disable:function(){return l=c=e=void 0,this},disabled:function(){return!l},lock:function(){return c=void 0,e||d.disable(),this},locked:function(){return!c},fireWith:function(t,e){return!l||n&&!c||(e=e||[],e=[t,e.slice?e.slice():e],i?c.push(e):u(e)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!n}};return d},Z.extend({Deferred:function(t){var e=[["resolve","done",Z.Callbacks("once memory"),"resolved"],["reject","fail",Z.Callbacks("once memory"),"rejected"],["notify","progress",Z.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return Z.Deferred(function(n){Z.each(e,function(e,o){var s=Z.isFunction(t[e])&&t[e];r[o[1]](function(){var t=s&&s.apply(this,arguments);t&&Z.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===i?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?Z.extend(t,i):i}},r={};return i.pipe=i.then,Z.each(e,function(t,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=V.call(arguments),s=o.length,a=1!==s||t&&Z.isFunction(t.promise)?s:0,l=1===a?t:Z.Deferred(),c=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?V.call(arguments):r,i===e?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);s>r;r++)o[r]&&Z.isFunction(o[r].promise)?o[r].promise().done(c(r,i,o)).fail(l.reject).progress(c(r,n,e)):--a;return a||l.resolveWith(i,o),l.promise()}});var gt;Z.fn.ready=function(t){return Z.ready.promise().done(t),this},Z.extend({isReady:!1,readyWait:1,holdReady:function(t){t?Z.readyWait++:Z.ready(!0)},ready:function(t){(t===!0?--Z.readyWait:Z.isReady)||(Z.isReady=!0,t!==!0&&--Z.readyWait>0||(gt.resolveWith(J,[Z]),Z.fn.triggerHandler&&(Z(J).triggerHandler("ready"),Z(J).off("ready"))))}}),Z.ready.promise=function(e){return gt||(gt=Z.Deferred(),"complete"===J.readyState?setTimeout(Z.ready):(J.addEventListener("DOMContentLoaded",s,!1),t.addEventListener("load",s,!1))),gt.promise(e)},Z.ready.promise();var mt=Z.access=function(t,e,n,i,r,o,s){var a=0,l=t.length,c=null==n;if("object"===Z.type(n)){r=!0;for(a in n)Z.access(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,Z.isFunction(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(Z(t),n)})),e))for(;l>a;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:c?e.call(t):l?e(t[0],n):o};Z.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},a.uid=1,a.accepts=Z.acceptData,a.prototype={key:function(t){if(!a.accepts(t))return 0;var e={},n=t[this.expando];if(!n){n=a.uid++;try{e[this.expando]={value:n},Object.defineProperties(t,e)}catch(i){e[this.expando]=n,Z.extend(t,e)}}return this.cache[n]||(this.cache[n]={}),n},set:function(t,e,n){var i,r=this.key(t),o=this.cache[r];if("string"==typeof e)o[e]=n;else if(Z.isEmptyObject(o))Z.extend(this.cache[r],e);else for(i in e)o[i]=e[i];return o},get:function(t,e){var n=this.cache[this.key(t)];return void 0===e?n:n[e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,Z.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,r,o=this.key(t),s=this.cache[o];if(void 0===e)this.cache[o]={};else{Z.isArray(e)?i=e.concat(e.map(Z.camelCase)):(r=Z.camelCase(e),e in s?i=[e,r]:(i=r,i=i in s?[i]:i.match(ht)||[])),n=i.length;for(;n--;)delete s[i[n]]}},hasData:function(t){return!Z.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var vt=new a,yt=new a,bt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,wt=/([A-Z])/g;Z.extend({hasData:function(t){return yt.hasData(t)||vt.hasData(t)},data:function(t,e,n){return yt.access(t,e,n)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,n){return vt.access(t,e,n)},_removeData:function(t,e){vt.remove(t,e)}}),Z.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=yt.get(o),1===o.nodeType&&!vt.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=Z.camelCase(i.slice(5)),l(o,i,r[i])));vt.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){yt.set(this,t)}):mt(this,function(e){var n,i=Z.camelCase(t);if(o&&void 0===e){if(n=yt.get(o,t),void 0!==n)return n;if(n=yt.get(o,i),void 0!==n)return n;if(n=l(o,i,void 0),void 0!==n)return n}else this.each(function(){var n=yt.get(this,i);yt.set(this,i,e),-1!==t.indexOf("-")&&void 0!==n&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),Z.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=vt.get(t,e),n&&(!i||Z.isArray(n)?i=vt.access(t,e,Z.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=Z.queue(t,e),i=n.length,r=n.shift(),o=Z._queueHooks(t,e),s=function(){Z.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return vt.get(t,n)||vt.access(t,n,{empty:Z.Callbacks("once memory").add(function(){vt.remove(t,[e+"queue",n])})})}}),Z.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?Z.queue(this[0],t):void 0===e?this:this.each(function(){var n=Z.queue(this,t,e);Z._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&Z.dequeue(this,t)})},dequeue:function(t){return this.each(function(){Z.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=Z.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=vt.get(o[s],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var Et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,xt=["Top","Right","Bottom","Left"],Tt=function(t,e){return t=e||t,"none"===Z.css(t,"display")||!Z.contains(t.ownerDocument,t)},Ct=/^(?:checkbox|radio)$/i;!function(){var t=J.createDocumentFragment(),e=t.appendChild(J.createElement("div")),n=J.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),G.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",G.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var St="undefined";G.focusinBubbles="onfocusin"in t;var _t=/^key/,It=/^(?:mouse|pointer|contextmenu)|click/,Dt=/^(?:focusinfocus|focusoutblur)$/,Ot=/^([^.]*)(?:\.(.+)|)$/;Z.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,c,u,d,f,h,p,g,m=vt.get(t);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),n.guid||(n.guid=Z.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(e){return typeof Z!==St&&Z.event.triggered!==e.type?Z.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(ht)||[""],c=e.length;c--;)a=Ot.exec(e[c])||[],h=g=a[1],p=(a[2]||"").split(".").sort(),h&&(d=Z.event.special[h]||{},h=(r?d.delegateType:d.bindType)||h,d=Z.event.special[h]||{},u=Z.extend({type:h,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&Z.expr.match.needsContext.test(r),namespace:p.join(".")},o),(f=l[h])||(f=l[h]=[],f.delegateCount=0,d.setup&&d.setup.call(t,i,p,s)!==!1||t.addEventListener&&t.addEventListener(h,s,!1)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,u):f.push(u),Z.event.global[h]=!0)},remove:function(t,e,n,i,r){var o,s,a,l,c,u,d,f,h,p,g,m=vt.hasData(t)&&vt.get(t);if(m&&(l=m.events)){for(e=(e||"").match(ht)||[""],c=e.length;c--;)if(a=Ot.exec(e[c])||[],h=g=a[1],p=(a[2]||"").split(".").sort(),h){for(d=Z.event.special[h]||{},h=(i?d.delegateType:d.bindType)||h,f=l[h]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)u=f[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(o,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(t,u));s&&!f.length&&(d.teardown&&d.teardown.call(t,p,m.handle)!==!1||Z.removeEvent(t,h,m.handle),delete l[h])}else for(h in l)Z.event.remove(t,h+e[c],n,i,!0);Z.isEmptyObject(l)&&(delete m.handle,vt.remove(t,"events"))}},trigger:function(e,n,i,r){var o,s,a,l,c,u,d,f=[i||J],h=Q.call(e,"type")?e.type:e,p=Q.call(e,"namespace")?e.namespace.split("."):[];if(s=a=i=i||J,3!==i.nodeType&&8!==i.nodeType&&!Dt.test(h+Z.event.triggered)&&(h.indexOf(".")>=0&&(p=h.split("."),h=p.shift(),p.sort()),c=h.indexOf(":")<0&&"on"+h,e=e[Z.expando]?e:new Z.Event(h,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=p.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:Z.makeArray(n,[e]),d=Z.event.special[h]||{},r||!d.trigger||d.trigger.apply(i,n)!==!1)){if(!r&&!d.noBubble&&!Z.isWindow(i)){for(l=d.delegateType||h,Dt.test(l+h)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(i.ownerDocument||J)&&f.push(a.defaultView||a.parentWindow||t)}for(o=0;(s=f[o++])&&!e.isPropagationStopped();)e.type=o>1?l:d.bindType||h,u=(vt.get(s,"events")||{})[e.type]&&vt.get(s,"handle"),u&&u.apply(s,n),u=c&&s[c],u&&u.apply&&Z.acceptData(s)&&(e.result=u.apply(s,n),e.result===!1&&e.preventDefault());return e.type=h,r||e.isDefaultPrevented()||d._default&&d._default.apply(f.pop(),n)!==!1||!Z.acceptData(i)||c&&Z.isFunction(i[h])&&!Z.isWindow(i)&&(a=i[c],a&&(i[c]=null),Z.event.triggered=h,i[h](),Z.event.triggered=void 0,a&&(i[c]=a)),e.result}},dispatch:function(t){t=Z.event.fix(t);var e,n,i,r,o,s=[],a=V.call(arguments),l=(vt.get(this,"events")||{})[t.type]||[],c=Z.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(s=Z.event.handlers.call(this,t,l),e=0;(r=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(o.namespace))&&(t.handleObj=o,t.data=o.data,i=((Z.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,o,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(i=[],n=0;a>n;n++)o=e[n],r=o.selector+" ",void 0===i[r]&&(i[r]=o.needsContext?Z(r,this).index(l)>=0:Z.find(r,this,null,[l]).length),i[r]&&i.push(o);i.length&&s.push({elem:l,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||J,i=n.documentElement,r=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||r&&r.scrollLeft||0)-(i&&i.clientLeft||r&&r.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||r&&r.scrollTop||0)-(i&&i.clientTop||r&&r.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[Z.expando])return t;var e,n,i,r=t.type,o=t,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=It.test(r)?this.mouseHooks:_t.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new Z.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=J),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==d()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===d()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&Z.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return Z.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var r=Z.extend(new Z.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?Z.event.trigger(r,null,e):Z.event.dispatch.call(e,r),r.isDefaultPrevented()&&n.preventDefault()}},Z.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)},Z.Event=function(t,e){return this instanceof Z.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?c:u):this.type=t,e&&Z.extend(this,e),this.timeStamp=t&&t.timeStamp||Z.now(),void(this[Z.expando]=!0)):new Z.Event(t,e)},Z.Event.prototype={isDefaultPrevented:u,isPropagationStopped:u,isImmediatePropagationStopped:u,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=c,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=c,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=c,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},Z.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){Z.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return(!r||r!==i&&!Z.contains(i,r))&&(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),G.focusinBubbles||Z.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){Z.event.simulate(e,t.target,Z.event.fix(t),!0)};Z.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=vt.access(i,e);r||i.addEventListener(t,n,!0),vt.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=vt.access(i,e)-1;r?vt.access(i,e,r):(i.removeEventListener(t,n,!0),vt.remove(i,e))}}}),Z.fn.extend({on:function(t,e,n,i,r){var o,s;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(s in t)this.on(s,e,n,t[s],r);return this}if(null==n&&null==i?(i=e,n=e=void 0):null==i&&("string"==typeof e?(i=n,n=void 0):(i=n,n=e,e=void 0)),i===!1)i=u;else if(!i)return this;return 1===r&&(o=i,i=function(t){return Z().off(t),o.apply(this,arguments)},i.guid=o.guid||(o.guid=Z.guid++)),this.each(function(){Z.event.add(this,t,i,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,Z(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return(e===!1||"function"==typeof e)&&(n=e,e=void 0),n===!1&&(n=u),this.each(function(){Z.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){Z.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?Z.event.trigger(t,e,n,!0):void 0}});var At=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Lt=/<([\w:]+)/,Nt=/<|&#?\w+;/,Pt=/<(?:script|style|link)/i,kt=/checked\s*(?:[^=]|=\s*.checked.)/i,$t=/^$|\/(?:java|ecma)script/i,Rt=/^true\/(.*)/,Bt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Ft={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ft.optgroup=Ft.option,Ft.tbody=Ft.tfoot=Ft.colgroup=Ft.caption=Ft.thead,Ft.th=Ft.td,Z.extend({clone:function(t,e,n){var i,r,o,s,a=t.cloneNode(!0),l=Z.contains(t.ownerDocument,t);if(!(G.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||Z.isXMLDoc(t)))for(s=v(a),o=v(t),i=0,r=o.length;r>i;i++)y(o[i],s[i]);if(e)if(n)for(o=o||v(t),s=s||v(a),i=0,r=o.length;r>i;i++)m(o[i],s[i]);else m(t,a);return s=v(a,"script"),s.length>0&&g(s,!l&&v(t,"script")),a},buildFragment:function(t,e,n,i){for(var r,o,s,a,l,c,u=e.createDocumentFragment(),d=[],f=0,h=t.length;h>f;f++)if(r=t[f],r||0===r)if("object"===Z.type(r))Z.merge(d,r.nodeType?[r]:r);else if(Nt.test(r)){for(o=o||u.appendChild(e.createElement("div")),s=(Lt.exec(r)||["",""])[1].toLowerCase(),a=Ft[s]||Ft._default,o.innerHTML=a[1]+r.replace(At,"<$1></$2>")+a[2],c=a[0];c--;)o=o.lastChild;Z.merge(d,o.childNodes),o=u.firstChild,o.textContent=""}else d.push(e.createTextNode(r));for(u.textContent="",f=0;r=d[f++];)if((!i||-1===Z.inArray(r,i))&&(l=Z.contains(r.ownerDocument,r),o=v(u.appendChild(r),"script"),l&&g(o),n))for(c=0;r=o[c++];)$t.test(r.type||"")&&n.push(r);return u},cleanData:function(t){for(var e,n,i,r,o=Z.event.special,s=0;void 0!==(n=t[s]);s++){if(Z.acceptData(n)&&(r=n[vt.expando],r&&(e=vt.cache[r]))){if(e.events)for(i in e.events)o[i]?Z.event.remove(n,i):Z.removeEvent(n,i,e.handle);vt.cache[r]&&delete vt.cache[r]}delete yt.cache[n[yt.expando]]}}}),Z.fn.extend({text:function(t){return mt(this,function(t){return void 0===t?Z.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=f(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=f(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=t?Z.filter(t,this):this,r=0;null!=(n=i[r]);r++)e||1!==n.nodeType||Z.cleanData(v(n)),n.parentNode&&(e&&Z.contains(n.ownerDocument,n)&&g(v(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(Z.cleanData(v(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return Z.clone(this,t,e)})},html:function(t){return mt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Pt.test(t)&&!Ft[(Lt.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(At,"<$1></$2>");try{for(;i>n;n++)e=this[n]||{},1===e.nodeType&&(Z.cleanData(v(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,Z.cleanData(v(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=Y.apply([],t);var n,i,r,o,s,a,l=0,c=this.length,u=this,d=c-1,f=t[0],g=Z.isFunction(f);if(g||c>1&&"string"==typeof f&&!G.checkClone&&kt.test(f))return this.each(function(n){var i=u.eq(n);g&&(t[0]=f.call(this,n,i.html())),i.domManip(t,e)});if(c&&(n=Z.buildFragment(t,this[0].ownerDocument,!1,this),i=n.firstChild,1===n.childNodes.length&&(n=i),i)){for(r=Z.map(v(n,"script"),h),o=r.length;c>l;l++)s=n,l!==d&&(s=Z.clone(s,!0,!0),o&&Z.merge(r,v(s,"script"))),e.call(this[l],s,l);if(o)for(a=r[r.length-1].ownerDocument,Z.map(r,p),l=0;o>l;l++)s=r[l],$t.test(s.type||"")&&!vt.access(s,"globalEval")&&Z.contains(a,s)&&(s.src?Z._evalUrl&&Z._evalUrl(s.src):Z.globalEval(s.textContent.replace(Bt,"")))}return this}}),Z.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){Z.fn[t]=function(t){for(var n,i=[],r=Z(t),o=r.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),Z(r[s])[e](n),H.apply(i,n.get());return this.pushStack(i)}});var Mt,Ut={},jt=/^margin/,Xt=new RegExp("^("+Et+")(?!px)[a-z%]+$","i"),Vt=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",s.innerHTML="",r.appendChild(o);var e=t.getComputedStyle(s,null);n="1%"!==e.top,i="4px"===e.width,r.removeChild(o)}var n,i,r=J.documentElement,o=J.createElement("div"),s=J.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",G.clearCloneStyle="content-box"===s.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(s),t.getComputedStyle&&Z.extend(G,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},reliableMarginRight:function(){var e,n=s.appendChild(J.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",r.appendChild(o),e=!parseFloat(t.getComputedStyle(n,null).marginRight),r.removeChild(o),s.removeChild(n),e}}))}(),Z.swap=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r};var Yt=/^(none|table(?!-c[ea]).+)/,Ht=new RegExp("^("+Et+")(.*)$","i"),qt=new RegExp("^([+-])=("+Et+")","i"),Wt={position:"absolute",visibility:"hidden",display:"block"},zt={letterSpacing:"0",fontWeight:"400"},Qt=["Webkit","O","Moz","ms"];Z.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=E(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=Z.camelCase(e),l=t.style;return e=Z.cssProps[a]||(Z.cssProps[a]=T(l,a)),s=Z.cssHooks[e]||Z.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:l[e]:(o=typeof n,"string"===o&&(r=qt.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(Z.css(t,e)),o="number"),null!=n&&n===n&&("number"!==o||Z.cssNumber[a]||(n+="px"),G.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l[e]=n)),void 0)}},css:function(t,e,n,i){var r,o,s,a=Z.camelCase(e);return e=Z.cssProps[a]||(Z.cssProps[a]=T(t.style,a)),s=Z.cssHooks[e]||Z.cssHooks[a],s&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=E(t,e,i)),"normal"===r&&e in zt&&(r=zt[e]),""===n||n?(o=parseFloat(r),n===!0||Z.isNumeric(o)?o||0:r):r}}),Z.each(["height","width"],function(t,e){Z.cssHooks[e]={get:function(t,n,i){return n?Yt.test(Z.css(t,"display"))&&0===t.offsetWidth?Z.swap(t,Wt,function(){return _(t,e,i)}):_(t,e,i):void 0},set:function(t,n,i){var r=i&&Vt(t);return C(t,n,i?S(t,e,i,"border-box"===Z.css(t,"boxSizing",!1,r),r):0)}}}),Z.cssHooks.marginRight=x(G.reliableMarginRight,function(t,e){return e?Z.swap(t,{display:"inline-block"},E,[t,"marginRight"]):void 0}),Z.each({margin:"",padding:"",border:"Width"},function(t,e){Z.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[t+xt[i]+e]=o[i]||o[i-2]||o[0];return r}},jt.test(t)||(Z.cssHooks[t+e].set=C)}),Z.fn.extend({css:function(t,e){return mt(this,function(t,e,n){var i,r,o={},s=0;if(Z.isArray(e)){for(i=Vt(t),r=e.length;r>s;s++)o[e[s]]=Z.css(t,e[s],!1,i);return o}return void 0!==n?Z.style(t,e,n):Z.css(t,e)},t,e,arguments.length>1)},show:function(){return I(this,!0)},hide:function(){return I(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Tt(this)?Z(this).show():Z(this).hide()})}}),Z.Tween=D,D.prototype={constructor:D,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(Z.cssNumber[n]?"":"px")},cur:function(){var t=D.propHooks[this.prop];return t&&t.get?t.get(this):D.propHooks._default.get(this)},run:function(t){var e,n=D.propHooks[this.prop];return this.pos=e=this.options.duration?Z.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):D.propHooks._default.set(this),this}},D.prototype.init.prototype=D.prototype,D.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=Z.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){Z.fx.step[t.prop]?Z.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[Z.cssProps[t.prop]]||Z.cssHooks[t.prop])?Z.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},D.propHooks.scrollTop=D.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},Z.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},Z.fx=D.prototype.init,Z.fx.step={};var Gt,Jt,Kt=/^(?:toggle|show|hide)$/,Zt=new RegExp("^(?:([+-])=|)("+Et+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[N],ne={"*":[function(t,e){var n=this.createTween(t,e),i=n.cur(),r=Zt.exec(e),o=r&&r[3]||(Z.cssNumber[t]?"":"px"),s=(Z.cssNumber[t]||"px"!==o&&+i)&&Zt.exec(Z.css(n.elem,t)),a=1,l=20;if(s&&s[3]!==o){o=o||s[3],r=r||[],s=+i||1;do a=a||".5",s/=a,Z.style(n.elem,t,s+o);while(a!==(a=n.cur()/i)&&1!==a&&--l)}return r&&(s=n.start=+s||+i||0,n.unit=o,n.end=r[1]?s+(r[1]+1)*r[2]:+r[2]),n}]};Z.Animation=Z.extend(k,{tweener:function(t,e){Z.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,r=t.length;r>i;i++)n=t[i],ne[n]=ne[n]||[],ne[n].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),Z.speed=function(t,e,n){var i=t&&"object"==typeof t?Z.extend({},t):{complete:n||!n&&e||Z.isFunction(t)&&t,duration:t,easing:n&&e||e&&!Z.isFunction(e)&&e};return i.duration=Z.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in Z.fx.speeds?Z.fx.speeds[i.duration]:Z.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){Z.isFunction(i.old)&&i.old.call(this),i.queue&&Z.dequeue(this,i.queue)},i},Z.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Tt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=Z.isEmptyObject(t),o=Z.speed(e,n,i),s=function(){var e=k(this,Z.extend({},t),o);(r||vt.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){
var e=!0,r=null!=t&&t+"queueHooks",o=Z.timers,s=vt.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&te.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));(e||!n)&&Z.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=vt.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=Z.timers,s=i?i.length:0;for(n.finish=!0,Z.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;s>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),Z.each(["toggle","show","hide"],function(t,e){var n=Z.fn[e];Z.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(A(e,!0),t,i,r)}}),Z.each({slideDown:A("show"),slideUp:A("hide"),slideToggle:A("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){Z.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),Z.timers=[],Z.fx.tick=function(){var t,e=0,n=Z.timers;for(Gt=Z.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||Z.fx.stop(),Gt=void 0},Z.fx.timer=function(t){Z.timers.push(t),t()?Z.fx.start():Z.timers.pop()},Z.fx.interval=13,Z.fx.start=function(){Jt||(Jt=setInterval(Z.fx.tick,Z.fx.interval))},Z.fx.stop=function(){clearInterval(Jt),Jt=null},Z.fx.speeds={slow:600,fast:200,_default:400},Z.fn.delay=function(t,e){return t=Z.fx?Z.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},function(){var t=J.createElement("input"),e=J.createElement("select"),n=e.appendChild(J.createElement("option"));t.type="checkbox",G.checkOn=""!==t.value,G.optSelected=n.selected,e.disabled=!0,G.optDisabled=!n.disabled,t=J.createElement("input"),t.value="t",t.type="radio",G.radioValue="t"===t.value}();var ie,re,oe=Z.expr.attrHandle;Z.fn.extend({attr:function(t,e){return mt(this,Z.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){Z.removeAttr(this,t)})}}),Z.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(t&&3!==o&&8!==o&&2!==o)return typeof t.getAttribute===St?Z.prop(t,e,n):(1===o&&Z.isXMLDoc(t)||(e=e.toLowerCase(),i=Z.attrHooks[e]||(Z.expr.match.bool.test(e)?re:ie)),void 0===n?i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=Z.find.attr(t,e),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):void Z.removeAttr(t,e))},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(ht);if(o&&1===t.nodeType)for(;n=o[r++];)i=Z.propFix[n]||n,Z.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)},attrHooks:{type:{set:function(t,e){if(!G.radioValue&&"radio"===e&&Z.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),re={set:function(t,e,n){return e===!1?Z.removeAttr(t,n):t.setAttribute(n,n),n}},Z.each(Z.expr.match.bool.source.match(/\w+/g),function(t,e){var n=oe[e]||Z.find.attr;oe[e]=function(t,e,i){var r,o;return i||(o=oe[e],oe[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,oe[e]=o),r}});var se=/^(?:input|select|textarea|button)$/i;Z.fn.extend({prop:function(t,e){return mt(this,Z.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[Z.propFix[t]||t]})}}),Z.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var i,r,o,s=t.nodeType;if(t&&3!==s&&8!==s&&2!==s)return o=1!==s||!Z.isXMLDoc(t),o&&(e=Z.propFix[e]||e,r=Z.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||se.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),G.optSelected||(Z.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),Z.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Z.propFix[this.toLowerCase()]=this});var ae=/[\t\r\n\f]/g;Z.fn.extend({addClass:function(t){var e,n,i,r,o,s,a="string"==typeof t&&t,l=0,c=this.length;if(Z.isFunction(t))return this.each(function(e){Z(this).addClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(ht)||[];c>l;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ae," "):" ")){for(o=0;r=e[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");s=Z.trim(i),n.className!==s&&(n.className=s)}return this},removeClass:function(t){var e,n,i,r,o,s,a=0===arguments.length||"string"==typeof t&&t,l=0,c=this.length;if(Z.isFunction(t))return this.each(function(e){Z(this).removeClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(ht)||[];c>l;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ae," "):"")){for(o=0;r=e[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");s=t?Z.trim(i):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):this.each(Z.isFunction(t)?function(n){Z(this).toggleClass(t.call(this,n,this.className,e),e)}:function(){if("string"===n)for(var e,i=0,r=Z(this),o=t.match(ht)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else(n===St||"boolean"===n)&&(this.className&&vt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":vt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(ae," ").indexOf(e)>=0)return!0;return!1}});var le=/\r/g;Z.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=Z.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,Z(this).val()):t,null==r?r="":"number"==typeof r?r+="":Z.isArray(r)&&(r=Z.map(r,function(t){return null==t?"":t+""})),e=Z.valHooks[this.type]||Z.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=Z.valHooks[r.type]||Z.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(le,""):null==n?"":n)}}}),Z.extend({valHooks:{option:{get:function(t){var e=Z.find.attr(t,"value");return null!=e?e:Z.trim(Z.text(t))}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||0>r,s=o?null:[],a=o?r+1:i.length,l=0>r?a:o?r:0;a>l;l++)if(n=i[l],!(!n.selected&&l!==r||(G.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&Z.nodeName(n.parentNode,"optgroup"))){if(e=Z(n).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,i,r=t.options,o=Z.makeArray(e),s=r.length;s--;)i=r[s],(i.selected=Z.inArray(i.value,o)>=0)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),Z.each(["radio","checkbox"],function(){Z.valHooks[this]={set:function(t,e){return Z.isArray(e)?t.checked=Z.inArray(Z(t).val(),e)>=0:void 0}},G.checkOn||(Z.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),Z.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){Z.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),Z.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var ce=Z.now(),ue=/\?/;Z.parseJSON=function(t){return JSON.parse(t+"")},Z.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{n=new DOMParser,e=n.parseFromString(t,"text/xml")}catch(i){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&Z.error("Invalid XML: "+t),e};var de=/#.*$/,fe=/([?&])_=[^&]*/,he=/^(.*?):[ \t]*([^\r\n]*)$/gm,pe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ge=/^(?:GET|HEAD)$/,me=/^\/\//,ve=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,ye={},be={},we="*/".concat("*"),Ee=t.location.href,xe=ve.exec(Ee.toLowerCase())||[];Z.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ee,type:"GET",isLocal:pe.test(xe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":we,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":Z.parseJSON,"text xml":Z.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?B(B(t,Z.ajaxSettings),e):B(Z.ajaxSettings,t)},ajaxPrefilter:$(ye),ajaxTransport:$(be),ajax:function(t,e){function n(t,e,n,s){var l,u,v,y,w,x=e;2!==b&&(b=2,a&&clearTimeout(a),i=void 0,o=s||"",E.readyState=t>0?4:0,l=t>=200&&300>t||304===t,n&&(y=F(d,E,n)),y=M(d,y,E,l),l?(d.ifModified&&(w=E.getResponseHeader("Last-Modified"),w&&(Z.lastModified[r]=w),w=E.getResponseHeader("etag"),w&&(Z.etag[r]=w)),204===t||"HEAD"===d.type?x="nocontent":304===t?x="notmodified":(x=y.state,u=y.data,v=y.error,l=!v)):(v=x,(t||!x)&&(x="error",0>t&&(t=0))),E.status=t,E.statusText=(e||x)+"",l?p.resolveWith(f,[u,x,E]):p.rejectWith(f,[E,x,v]),E.statusCode(m),m=void 0,c&&h.trigger(l?"ajaxSuccess":"ajaxError",[E,d,l?u:v]),g.fireWith(f,[E,x]),c&&(h.trigger("ajaxComplete",[E,d]),--Z.active||Z.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,s,a,l,c,u,d=Z.ajaxSetup({},e),f=d.context||d,h=d.context&&(f.nodeType||f.jquery)?Z(f):Z.event,p=Z.Deferred(),g=Z.Callbacks("once memory"),m=d.statusCode||{},v={},y={},b=0,w="canceled",E={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!s)for(s={};e=he.exec(o);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?o:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return b||(t=y[n]=y[n]||t,v[t]=e),this},overrideMimeType:function(t){return b||(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>b)for(e in t)m[e]=[m[e],t[e]];else E.always(t[E.status]);return this},abort:function(t){var e=t||w;return i&&i.abort(e),n(0,e),this}};if(p.promise(E).complete=g.add,E.success=E.done,E.error=E.fail,d.url=((t||d.url||Ee)+"").replace(de,"").replace(me,xe[1]+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=Z.trim(d.dataType||"*").toLowerCase().match(ht)||[""],null==d.crossDomain&&(l=ve.exec(d.url.toLowerCase()),d.crossDomain=!(!l||l[1]===xe[1]&&l[2]===xe[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(xe[3]||("http:"===xe[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=Z.param(d.data,d.traditional)),R(ye,d,e,E),2===b)return E;c=Z.event&&d.global,c&&0===Z.active++&&Z.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!ge.test(d.type),r=d.url,d.hasContent||(d.data&&(r=d.url+=(ue.test(r)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=fe.test(r)?r.replace(fe,"$1_="+ce++):r+(ue.test(r)?"&":"?")+"_="+ce++)),d.ifModified&&(Z.lastModified[r]&&E.setRequestHeader("If-Modified-Since",Z.lastModified[r]),Z.etag[r]&&E.setRequestHeader("If-None-Match",Z.etag[r])),(d.data&&d.hasContent&&d.contentType!==!1||e.contentType)&&E.setRequestHeader("Content-Type",d.contentType),E.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+we+"; q=0.01":""):d.accepts["*"]);for(u in d.headers)E.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(f,E,d)===!1||2===b))return E.abort();w="abort";for(u in{success:1,error:1,complete:1})E[u](d[u]);if(i=R(be,d,e,E)){E.readyState=1,c&&h.trigger("ajaxSend",[E,d]),d.async&&d.timeout>0&&(a=setTimeout(function(){E.abort("timeout")},d.timeout));try{b=1,i.send(v,n)}catch(x){if(!(2>b))throw x;n(-1,x)}}else n(-1,"No Transport");return E},getJSON:function(t,e,n){return Z.get(t,e,n,"json")},getScript:function(t,e){return Z.get(t,void 0,e,"script")}}),Z.each(["get","post"],function(t,e){Z[e]=function(t,n,i,r){return Z.isFunction(n)&&(r=r||i,i=n,n=void 0),Z.ajax({url:t,type:e,dataType:r,data:n,success:i})}}),Z._evalUrl=function(t){return Z.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},Z.fn.extend({wrapAll:function(t){var e;return Z.isFunction(t)?this.each(function(e){Z(this).wrapAll(t.call(this,e))}):(this[0]&&(e=Z(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return this.each(Z.isFunction(t)?function(e){Z(this).wrapInner(t.call(this,e))}:function(){var e=Z(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=Z.isFunction(t);return this.each(function(n){Z(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){Z.nodeName(this,"body")||Z(this).replaceWith(this.childNodes)}).end()}}),Z.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},Z.expr.filters.visible=function(t){return!Z.expr.filters.hidden(t)};var Te=/%20/g,Ce=/\[\]$/,Se=/\r?\n/g,_e=/^(?:submit|button|image|reset|file)$/i,Ie=/^(?:input|select|textarea|keygen)/i;Z.param=function(t,e){var n,i=[],r=function(t,e){e=Z.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=Z.ajaxSettings&&Z.ajaxSettings.traditional),Z.isArray(t)||t.jquery&&!Z.isPlainObject(t))Z.each(t,function(){r(this.name,this.value)});else for(n in t)U(n,t[n],e,r);return i.join("&").replace(Te,"+")},Z.fn.extend({serialize:function(){return Z.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=Z.prop(this,"elements");return t?Z.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!Z(this).is(":disabled")&&Ie.test(this.nodeName)&&!_e.test(t)&&(this.checked||!Ct.test(t))}).map(function(t,e){var n=Z(this).val();return null==n?null:Z.isArray(n)?Z.map(n,function(t){return{name:e.name,value:t.replace(Se,"\r\n")}}):{name:e.name,value:n.replace(Se,"\r\n")}}).get()}}),Z.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var De=0,Oe={},Ae={0:200,1223:204},Le=Z.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Oe)Oe[t]()}),G.cors=!!Le&&"withCredentials"in Le,G.ajax=Le=!!Le,Z.ajaxTransport(function(t){var e;return G.cors||Le&&!t.crossDomain?{send:function(n,i){var r,o=t.xhr(),s=++De;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)o[r]=t.xhrFields[r];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)o.setRequestHeader(r,n[r]);e=function(t){return function(){e&&(delete Oe[s],e=o.onload=o.onerror=null,"abort"===t?o.abort():"error"===t?i(o.status,o.statusText):i(Ae[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=e(),o.onerror=e("error"),e=Oe[s]=e("abort");try{o.send(t.hasContent&&t.data||null)}catch(a){if(e)throw a}},abort:function(){e&&e()}}:void 0}),Z.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return Z.globalEval(t),t}}}),Z.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),Z.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=Z("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),J.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ne=[],Pe=/(=)\?(?=&|$)|\?\?/;Z.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ne.pop()||Z.expando+"_"+ce++;return this[t]=!0,t}}),Z.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,s,a=e.jsonp!==!1&&(Pe.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Pe.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(r=e.jsonpCallback=Z.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Pe,"$1"+r):e.jsonp!==!1&&(e.url+=(ue.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||Z.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){s=arguments},i.always(function(){t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,Ne.push(r)),s&&Z.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),Z.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||J;var i=st.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=Z.buildFragment([t],e,r),r&&r.length&&Z(r).remove(),Z.merge([],i.childNodes))};var ke=Z.fn.load;Z.fn.load=function(t,e,n){if("string"!=typeof t&&ke)return ke.apply(this,arguments);var i,r,o,s=this,a=t.indexOf(" ");return a>=0&&(i=Z.trim(t.slice(a)),t=t.slice(0,a)),Z.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&Z.ajax({url:t,type:r,dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?Z("<div>").append(Z.parseHTML(t)).find(i):t)}).complete(n&&function(t,e){s.each(n,o||[t.responseText,e,t])}),this},Z.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){Z.fn[e]=function(t){return this.on(e,t)}}),Z.expr.filters.animated=function(t){return Z.grep(Z.timers,function(e){return t===e.elem}).length};var $e=t.document.documentElement;Z.offset={setOffset:function(t,e,n){var i,r,o,s,a,l,c,u=Z.css(t,"position"),d=Z(t),f={};"static"===u&&(t.style.position="relative"),a=d.offset(),o=Z.css(t,"top"),l=Z.css(t,"left"),c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1,c?(i=d.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),Z.isFunction(e)&&(e=e.call(t,n,a)),null!=e.top&&(f.top=e.top-a.top+s),null!=e.left&&(f.left=e.left-a.left+r),"using"in e?e.using.call(t,f):d.css(f)}},Z.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){Z.offset.setOffset(this,t,e)});var e,n,i=this[0],r={top:0,left:0},o=i&&i.ownerDocument;if(o)return e=o.documentElement,Z.contains(e,i)?(typeof i.getBoundingClientRect!==St&&(r=i.getBoundingClientRect()),n=j(o),{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===Z.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),Z.nodeName(t[0],"html")||(i=t.offset()),i.top+=Z.css(t[0],"borderTopWidth",!0),i.left+=Z.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-Z.css(n,"marginTop",!0),left:e.left-i.left-Z.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||$e;t&&!Z.nodeName(t,"html")&&"static"===Z.css(t,"position");)t=t.offsetParent;return t||$e})}}),Z.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var i="pageYOffset"===n;Z.fn[e]=function(r){return mt(this,function(e,r,o){var s=j(e);return void 0===o?s?s[n]:e[r]:void(s?s.scrollTo(i?t.pageXOffset:o,i?o:t.pageYOffset):e[r]=o)},e,r,arguments.length,null)}}),Z.each(["top","left"],function(t,e){Z.cssHooks[e]=x(G.pixelPosition,function(t,n){return n?(n=E(t,e),Xt.test(n)?Z(t).position()[e]+"px":n):void 0})}),Z.each({Height:"height",Width:"width"},function(t,e){Z.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){Z.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||r===!0?"margin":"border");return mt(this,function(e,n,i){var r;return Z.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?Z.css(e,n,s):Z.style(e,n,i,s)},e,o?i:void 0,o,null)}})}),Z.fn.size=function(){return this.length},Z.fn.andSelf=Z.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return Z});var Re=t.jQuery,Be=t.$;return Z.noConflict=function(e){return t.$===Z&&(t.$=Be),e&&t.jQuery===Z&&(t.jQuery=Re),Z},typeof e===St&&(t.jQuery=t.$=Z),Z}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",function(){n=!0});var r=function(){n||t(i).trigger(t.support.transition.end)};return setTimeout(r,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),r=n.data("bs.alert");r||n.data("bs.alert",r=new i(this)),"string"==typeof e&&r[e].call(n)})}var n='[data-dismiss="alert"]',i=function(e){t(e).on("click",n,this.close)};i.VERSION="3.3.5",i.TRANSITION_DURATION=150,i.prototype.close=function(e){function n(){s.detach().trigger("closed.bs.alert").remove()}var r=t(this),o=r.attr("data-target");o||(o=r.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,""));var s=t(o);e&&e.preventDefault(),s.length||(s=r.closest(".alert")),s.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",n).emulateTransitionEnd(i.TRANSITION_DURATION):n())};var r=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=r,this},t(document).on("click.bs.alert.data-api",n,i.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.button"),o="object"==typeof e&&e;r||i.data("bs.button",r=new n(this,o)),"toggle"==e?r.toggle():e&&r.setState(e)})}var n=function(e,i){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,i),this.isLoading=!1};n.VERSION="3.3.5",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",i=this.$element,r=i.is("input")?"val":"html",o=i.data();e+="Text",null==o.resetText&&i.data("resetText",i[r]()),setTimeout(t.proxy(function(){i[r](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var i=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=i,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var i=t(n.target);i.hasClass("btn")||(i=i.closest(".btn")),e.call(i,"toggle"),t(n.target).is('input[type="radio"]')||t(n.target).is('input[type="checkbox"]')||n.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.carousel"),o=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e),s="string"==typeof e?e:o.slide;r||i.data("bs.carousel",r=new n(this,o)),"number"==typeof e?r.to(e):s?r[s]():o.interval&&r.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.5",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e),i="prev"==t&&0===n||"next"==t&&n==this.$items.length-1;if(i&&!this.options.wrap)return e;var r="prev"==t?-1:1,o=(n+r)%this.$items.length;return this.$items.eq(o)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,i){var r=this.$element.find(".item.active"),o=i||this.getItemForDirection(e,r),s=this.interval,a="next"==e?"left":"right",l=this;if(o.hasClass("active"))return this.sliding=!1;var c=o[0],u=t.Event("slide.bs.carousel",{relatedTarget:c,direction:a});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,s&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var d=t(this.$indicators.children()[this.getItemIndex(o)]);d&&d.addClass("active")}var f=t.Event("slid.bs.carousel",{relatedTarget:c,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,r.addClass(a),o.addClass(a),r.one("bsTransitionEnd",function(){o.removeClass([e,a].join(" ")).addClass("active"),r.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(f)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(r.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(f)),s&&this.cycle(),this}};var i=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=i,this};var r=function(n){var i,r=t(this),o=t(r.attr("data-target")||(i=r.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var s=t.extend({},o.data(),r.data()),a=r.attr("data-slide-to");a&&(s.interval=!1),e.call(o,s),a&&o.data("bs.carousel").to(a),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",r).on("click.bs.carousel.data-api","[data-slide-to]",r),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){var n,i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(i)}function n(e){return this.each(function(){var n=t(this),r=n.data("bs.collapse"),o=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);!r&&o.toggle&&/show|hide/.test(e)&&(o.toggle=!1),r||n.data("bs.collapse",r=new i(this,o)),"string"==typeof e&&r[e]()})}var i=function(e,n){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};i.VERSION="3.3.5",i.TRANSITION_DURATION=350,i.DEFAULTS={toggle:!0},i.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},i.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,r=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(r&&r.length&&(e=r.data("bs.collapse"),e&&e.transitioning))){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){r&&r.length&&(n.call(r,"hide"),e||r.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(i.TRANSITION_DURATION)[s](this.$element[0][l])}}}},i.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var r=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(i.TRANSITION_DURATION):r.call(this)}}},i.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},i.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,i){var r=t(i);this.addAriaAndCollapsedClass(e(r),r)},this)).end()},i.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var r=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=i,t.fn.collapse.noConflict=function(){return t.fn.collapse=r,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(i){var r=t(this);r.attr("data-target")||i.preventDefault();var o=e(r),s=o.data("bs.collapse"),a=s?"toggle":r.data();n.call(o,a)})}(jQuery),+function(t){"use strict";function e(e){var n=e.attr("data-target");n||(n=e.attr("href"),
n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i=n&&t(n);return i&&i.length?i:e.parent()}function n(n){n&&3===n.which||(t(r).remove(),t(o).each(function(){var i=t(this),r=e(i),o={relatedTarget:this};r.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(r[0],n.target)||(r.trigger(n=t.Event("hide.bs.dropdown",o)),n.isDefaultPrevented()||(i.attr("aria-expanded","false"),r.removeClass("open").trigger("hidden.bs.dropdown",o))))}))}function i(e){return this.each(function(){var n=t(this),i=n.data("bs.dropdown");i||n.data("bs.dropdown",i=new s(this)),"string"==typeof e&&i[e].call(n)})}var r=".dropdown-backdrop",o='[data-toggle="dropdown"]',s=function(e){t(e).on("click.bs.dropdown",this.toggle)};s.VERSION="3.3.5",s.prototype.toggle=function(i){var r=t(this);if(!r.is(".disabled, :disabled")){var o=e(r),s=o.hasClass("open");if(n(),!s){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var a={relatedTarget:this};if(o.trigger(i=t.Event("show.bs.dropdown",a)),i.isDefaultPrevented())return;r.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger("shown.bs.dropdown",a)}return!1}},s.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var i=t(this);if(n.preventDefault(),n.stopPropagation(),!i.is(".disabled, :disabled")){var r=e(i),s=r.hasClass("open");if(!s&&27!=n.which||s&&27==n.which)return 27==n.which&&r.find(o).trigger("focus"),i.trigger("click");var a=" li:not(.disabled):visible a",l=r.find(".dropdown-menu"+a);if(l.length){var c=l.index(n.target);38==n.which&&c>0&&c--,40==n.which&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=i,t.fn.dropdown.Constructor=s,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,s.prototype.toggle).on("keydown.bs.dropdown.data-api",o,s.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",s.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,i){return this.each(function(){var r=t(this),o=r.data("bs.modal"),s=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e);o||r.data("bs.modal",o=new n(this,s)),"string"==typeof e?o[e](i):s.show&&o.show(i)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.5",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var i=this,r=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(r),this.isShown||r.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var r=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),r&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});r?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(n.TRANSITION_DURATION):i.$element.trigger("focus").trigger(o)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var i=this,r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&r;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+r).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){i.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):s()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var i=t(this),r=i.attr("href"),o=t(i.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),s=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(r)&&r},o.data(),i.data());i.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),e.call(o,s,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tooltip"),o="object"==typeof e&&e;(r||!/destroy|hide/.test(e))&&(r||i.data("bs.tooltip",r=new n(this,o)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};n.VERSION="3.3.5",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,i){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var r=this.options.trigger.split(" "),o=r.length;o--;){var s=r[o];if("click"==s)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=s){var a="hover"==s?"mouseenter":"focusin",l="hover"==s?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,i){n[t]!=i&&(e[t]=i)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState?void(n.hoverState="in"):(clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),n.isInStateTrue()?void 0:(clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?void(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)):n.hide())},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var i=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!i)return;var r=this,o=this.tip(),s=this.getUID(this.type);this.setContent(),o.attr("id",s),this.$element.attr("aria-describedby",s),this.options.animation&&o.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,c=l.test(a);c&&(a=a.replace(l,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var u=this.getPosition(),d=o[0].offsetWidth,f=o[0].offsetHeight;if(c){var h=a,p=this.getPosition(this.$viewport);a="bottom"==a&&u.bottom+f>p.bottom?"top":"top"==a&&u.top-f<p.top?"bottom":"right"==a&&u.right+d>p.width?"left":"left"==a&&u.left-d<p.left?"right":a,o.removeClass(h).addClass(a)}var g=this.getCalculatedOffset(a,u,d,f);this.applyPlacement(g,a);var m=function(){var t=r.hoverState;r.$element.trigger("shown.bs."+r.type),r.hoverState=null,"out"==t&&r.leave(r)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",m).emulateTransitionEnd(n.TRANSITION_DURATION):m()}},n.prototype.applyPlacement=function(e,n){var i=this.tip(),r=i[0].offsetWidth,o=i[0].offsetHeight,s=parseInt(i.css("margin-top"),10),a=parseInt(i.css("margin-left"),10);isNaN(s)&&(s=0),isNaN(a)&&(a=0),e.top+=s,e.left+=a,t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),i.addClass("in");var l=i[0].offsetWidth,c=i[0].offsetHeight;"top"==n&&c!=o&&(e.top=e.top+o-c);var u=this.getViewportAdjustedDelta(n,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var d=/top|bottom/.test(n),f=d?2*u.left-r+l:2*u.top-o+c,h=d?"offsetWidth":"offsetHeight";i.offset(e),this.replaceArrow(f,i[0][h],d)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function i(){"in"!=r.hoverState&&o.detach(),r.$element.removeAttr("aria-describedby").trigger("hidden.bs."+r.type),e&&e()}var r=this,o=t(this.$tip),s=t.Event("hide.bs."+this.type);return this.$element.trigger(s),s.isDefaultPrevented()?void 0:(o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",i).emulateTransitionEnd(n.TRANSITION_DURATION):i(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],i="BODY"==n.tagName,r=n.getBoundingClientRect();null==r.width&&(r=t.extend({},r,{width:r.right-r.left,height:r.bottom-r.top}));var o=i?{top:0,left:0}:e.offset(),s={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},a=i?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},r,s,a,o)},n.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,i){var r={top:0,left:0};if(!this.$viewport)return r;var o=this.options.viewport&&this.options.viewport.padding||0,s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-o-s.scroll,l=e.top+o-s.scroll+i;a<s.top?r.top=s.top-a:l>s.top+s.height&&(r.top=s.top+s.height-l)}else{var c=e.left-o,u=e.left+o+n;c<s.left?r.left=s.left-c:u>s.right&&(r.left=s.left+s.width-u)}return r},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var i=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=i,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.popover"),o="object"==typeof e&&e;(r||!/destroy|hide/.test(e))&&(r||i.data("bs.popover",r=new n(this,o)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.5",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var i=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=i,this}}(jQuery),+function(t){"use strict";function e(n,i){this.$body=t(document.body),this.$scrollElement=t(t(n).is(document.body)?window:n),this.options=t.extend({},e.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var i=t(this),r=i.data("bs.scrollspy"),o="object"==typeof n&&n;r||i.data("bs.scrollspy",r=new e(this,o)),"string"==typeof n&&r[n]()})}e.VERSION="3.3.5",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",i=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",i=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),r=e.data("target")||e.attr("href"),o=/^#./.test(r)&&t(r);return o&&o.length&&o.is(":visible")&&[[o[n]().top+i,r]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),r=this.offsets,o=this.targets,s=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=i)return s!=(t=o[o.length-1])&&this.activate(t);if(s&&e<r[0])return this.activeTarget=null,this.clear();for(t=r.length;t--;)s!=o[t]&&e>=r[t]&&(void 0===r[t+1]||e<r[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',i=t(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var i=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=i,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tab");r||i.data("bs.tab",r=new n(this)),"string"==typeof e&&r[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.5",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=e.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var r=n.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),s=t.Event("show.bs.tab",{relatedTarget:r[0]});if(r.trigger(o),e.trigger(s),!s.isDefaultPrevented()&&!o.isDefaultPrevented()){var a=t(i);this.activate(e.closest("li"),n),this.activate(a,a.parent(),function(){r.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:r[0]})})}}},n.prototype.activate=function(e,i,r){function o(){s.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),r&&r()}var s=i.find("> .active"),a=r&&t.support.transition&&(s.length&&s.hasClass("fade")||!!i.find("> .fade").length);s.length&&a?s.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o(),s.removeClass("in")};var i=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=i,this};var r=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',r).on("click.bs.tab.data-api",'[data-toggle="pill"]',r)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.affix"),o="object"==typeof e&&e;r||i.data("bs.affix",r=new n(this,o)),"string"==typeof e&&r[e]()})}var n=function(e,i){this.options=t.extend({},n.DEFAULTS,i),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.5",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,i){var r=this.$target.scrollTop(),o=this.$element.offset(),s=this.$target.height();if(null!=n&&"top"==this.affixed)return n>r?"top":!1;if("bottom"==this.affixed)return null!=n?r+this.unpin<=o.top?!1:"bottom":t-i>=r+s?!1:"bottom";var a=null==this.affixed,l=a?r:o.top,c=a?s:e;return null!=n&&n>=r?"top":null!=i&&l+c>=t-i?"bottom":!1},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),i=this.options.offset,r=i.top,o=i.bottom,s=Math.max(t(document).height(),t(document.body).height());"object"!=typeof i&&(o=r=i),"function"==typeof r&&(r=i.top(this.$element)),"function"==typeof o&&(o=i.bottom(this.$element));var a=this.getState(s,e,r,o);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),c=t.Event(l+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:s-e-o})}};var i=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=i,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),i=n.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),e.call(n,i)})})}(jQuery),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)}(function(t){"use strict";var e={},n=Math.max,i=Math.min;e.c={},e.c.d=t(document),e.c.t=function(t){return t.originalEvent.touches.length-1},e.o=function(){var n=this;this.o=null,this.$=null,this.i=null,this.g=null,this.v=null,this.cv=null,this.x=0,this.y=0,this.w=0,this.h=0,this.$c=null,this.c=null,this.t=0,this.isInit=!1,this.fgColor=null,this.pColor=null,this.dH=null,this.cH=null,this.eH=null,this.rH=null,this.scale=1,this.relative=!1,this.relativeWidth=!1,this.relativeHeight=!1,this.$div=null,this.run=function(){var e=function(t,e){var i;for(i in e)n.o[i]=e[i];n._carve().init(),n._configure()._draw()};if(!this.$.data("kontroled")){if(this.$.data("kontroled",!0),this.extend(),this.o=t.extend({min:void 0!==this.$.data("min")?this.$.data("min"):0,max:void 0!==this.$.data("max")?this.$.data("max"):100,stopper:!0,readOnly:this.$.data("readonly")||"readonly"===this.$.attr("readonly"),cursor:this.$.data("cursor")===!0&&30||this.$.data("cursor")||0,thickness:this.$.data("thickness")&&Math.max(Math.min(this.$.data("thickness"),1),.01)||.35,lineCap:this.$.data("linecap")||"butt",width:this.$.data("width")||200,height:this.$.data("height")||200,displayInput:null==this.$.data("displayinput")||this.$.data("displayinput"),displayPrevious:this.$.data("displayprevious"),fgColor:this.$.data("fgcolor")||"#87CEEB",inputColor:this.$.data("inputcolor"),font:this.$.data("font")||"Arial",fontWeight:this.$.data("font-weight")||"bold",inline:!1,step:this.$.data("step")||1,rotation:this.$.data("rotation"),draw:null,change:null,cancel:null,release:null,format:function(t){return t},parse:function(t){return parseFloat(t)}},this.o),this.o.flip="anticlockwise"===this.o.rotation||"acw"===this.o.rotation,this.o.inputColor||(this.o.inputColor=this.o.fgColor),this.$.is("fieldset")?(this.v={},this.i=this.$.find("input"),this.i.each(function(e){var i=t(this);n.i[e]=i,n.v[e]=n.o.parse(i.val()),i.bind("change blur",function(){var t={};t[e]=i.val(),n.val(n._validate(t))})}),this.$.find("legend").remove()):(this.i=this.$,this.v=this.o.parse(this.$.val()),""===this.v&&(this.v=this.o.min),this.$.bind("change blur",function(){n.val(n._validate(n.o.parse(n.$.val())))})),!this.o.displayInput&&this.$.hide(),this.$c=t(document.createElement("canvas")).attr({width:this.o.width,height:this.o.height}),this.$div=t('<div style="'+(this.o.inline?"display:inline;":"")+"width:"+this.o.width+"px;height:"+this.o.height+'px;"></div>'),this.$.wrap(this.$div).before(this.$c),this.$div=this.$.parent(),"undefined"!=typeof G_vmlCanvasManager&&G_vmlCanvasManager.initElement(this.$c[0]),this.c=this.$c[0].getContext?this.$c[0].getContext("2d"):null,!this.c)throw{name:"CanvasNotSupportedException",message:"Canvas not supported. Please use excanvas on IE8.0.",toString:function(){return this.name+": "+this.message}};return this.scale=(window.devicePixelRatio||1)/(this.c.webkitBackingStorePixelRatio||this.c.mozBackingStorePixelRatio||this.c.msBackingStorePixelRatio||this.c.oBackingStorePixelRatio||this.c.backingStorePixelRatio||1),this.relativeWidth=this.o.width%1!==0&&this.o.width.indexOf("%"),this.relativeHeight=this.o.height%1!==0&&this.o.height.indexOf("%"),this.relative=this.relativeWidth||this.relativeHeight,this._carve(),this.v instanceof Object?(this.cv={},this.copy(this.v,this.cv)):this.cv=this.v,this.$.bind("configure",e).parent().bind("configure",e),this._listen()._configure()._xy().init(),this.isInit=!0,this.$.val(this.o.format(this.v)),this._draw(),this}},this._carve=function(){if(this.relative){var t=this.relativeWidth?this.$div.parent().width()*parseInt(this.o.width)/100:this.$div.parent().width(),e=this.relativeHeight?this.$div.parent().height()*parseInt(this.o.height)/100:this.$div.parent().height();this.w=this.h=Math.min(t,e)}else this.w=this.o.width,this.h=this.o.height;return this.$div.css({width:this.w+"px",height:this.h+"px"}),this.$c.attr({width:this.w,height:this.h}),1!==this.scale&&(this.$c[0].width=this.$c[0].width*this.scale,this.$c[0].height=this.$c[0].height*this.scale,this.$c.width(this.w),this.$c.height(this.h)),this},this._draw=function(){var t=!0;n.g=n.c,n.clear(),n.dH&&(t=n.dH()),t!==!1&&n.draw()},this._touch=function(t){var i=function(t){var e=n.xy2val(t.originalEvent.touches[n.t].pageX,t.originalEvent.touches[n.t].pageY);e!=n.cv&&(n.cH&&n.cH(e)===!1||(n.change(n._validate(e)),n._draw()))};return this.t=e.c.t(t),i(t),e.c.d.bind("touchmove.k",i).bind("touchend.k",function(){e.c.d.unbind("touchmove.k touchend.k"),n.val(n.cv)}),this},this._mouse=function(t){var i=function(t){var e=n.xy2val(t.pageX,t.pageY);e!=n.cv&&(n.cH&&n.cH(e)===!1||(n.change(n._validate(e)),n._draw()))};return i(t),e.c.d.bind("mousemove.k",i).bind("keyup.k",function(t){if(27===t.keyCode){if(e.c.d.unbind("mouseup.k mousemove.k keyup.k"),n.eH&&n.eH()===!1)return;n.cancel()}}).bind("mouseup.k",function(t){e.c.d.unbind("mousemove.k mouseup.k keyup.k"),n.val(n.cv)}),this},this._xy=function(){var t=this.$c.offset();return this.x=t.left,this.y=t.top,this},this._listen=function(){return this.o.readOnly?this.$.attr("readonly","readonly"):(this.$c.bind("mousedown",function(t){t.preventDefault(),n._xy()._mouse(t)}).bind("touchstart",function(t){t.preventDefault(),n._xy()._touch(t)}),this.listen()),this.relative&&t(window).resize(function(){n._carve().init(),n._draw()}),this},this._configure=function(){return this.o.draw&&(this.dH=this.o.draw),this.o.change&&(this.cH=this.o.change),this.o.cancel&&(this.eH=this.o.cancel),this.o.release&&(this.rH=this.o.release),this.o.displayPrevious?(this.pColor=this.h2rgba(this.o.fgColor,"0.4"),this.fgColor=this.h2rgba(this.o.fgColor,"0.6")):this.fgColor=this.o.fgColor,this},this._clear=function(){this.$c[0].width=this.$c[0].width},this._validate=function(t){var e=~~((0>t?-.5:.5)+t/this.o.step)*this.o.step;return Math.round(100*e)/100},this.listen=function(){},this.extend=function(){},this.init=function(){},this.change=function(t){},this.val=function(t){},this.xy2val=function(t,e){},this.draw=function(){},this.clear=function(){this._clear()},this.h2rgba=function(t,e){var n;return t=t.substring(1,7),n=[parseInt(t.substring(0,2),16),parseInt(t.substring(2,4),16),parseInt(t.substring(4,6),16)],"rgba("+n[0]+","+n[1]+","+n[2]+","+e+")"},this.copy=function(t,e){for(var n in t)e[n]=t[n]}},e.Dial=function(){e.o.call(this),this.startAngle=null,this.xy=null,this.radius=null,this.lineWidth=null,this.cursorExt=null,this.w2=null,this.PI2=2*Math.PI,this.extend=function(){this.o=t.extend({bgColor:this.$.data("bgcolor")||"#EEEEEE",angleOffset:this.$.data("angleoffset")||0,angleArc:this.$.data("anglearc")||360,
inline:!0},this.o)},this.val=function(t,e){return null==t?this.v:(t=this.o.parse(t),void(e!==!1&&t!=this.v&&this.rH&&this.rH(t)===!1||(this.cv=this.o.stopper?n(i(t,this.o.max),this.o.min):t,this.v=this.cv,this.$.val(this.o.format(this.v)),this._draw())))},this.xy2val=function(t,e){var r,o;return r=Math.atan2(t-(this.x+this.w2),-(e-this.y-this.w2))-this.angleOffset,this.o.flip&&(r=this.angleArc-r-this.PI2),this.angleArc!=this.PI2&&0>r&&r>-.5?r=0:0>r&&(r+=this.PI2),o=r*(this.o.max-this.o.min)/this.angleArc+this.o.min,this.o.stopper&&(o=n(i(o,this.o.max),this.o.min)),o},this.listen=function(){var e,r,o,s,a=this,l=function(t){t.preventDefault();var o=t.originalEvent,s=o.detail||o.wheelDeltaX,l=o.detail||o.wheelDeltaY,c=a._validate(a.o.parse(a.$.val()))+(s>0||l>0?a.o.step:0>s||0>l?-a.o.step:0);c=n(i(c,a.o.max),a.o.min),a.val(c,!1),a.rH&&(clearTimeout(e),e=setTimeout(function(){a.rH(c),e=null},100),r||(r=setTimeout(function(){e&&a.rH(c),r=null},200)))},c=1,u={37:-a.o.step,38:a.o.step,39:a.o.step,40:-a.o.step};this.$.bind("keydown",function(e){var r=e.keyCode;if(r>=96&&105>=r&&(r=e.keyCode=r-48),o=parseInt(String.fromCharCode(r)),isNaN(o)&&(13!==r&&8!==r&&9!==r&&189!==r&&(190!==r||a.$.val().match(/\./))&&e.preventDefault(),t.inArray(r,[37,38,39,40])>-1)){e.preventDefault();var l=a.o.parse(a.$.val())+u[r]*c;a.o.stopper&&(l=n(i(l,a.o.max),a.o.min)),a.change(a._validate(l)),a._draw(),s=window.setTimeout(function(){c*=2},30)}}).bind("keyup",function(t){isNaN(o)?s&&(window.clearTimeout(s),s=null,c=1,a.val(a.$.val())):a.$.val()>a.o.max&&a.$.val(a.o.max)||a.$.val()<a.o.min&&a.$.val(a.o.min)}),this.$c.bind("mousewheel DOMMouseScroll",l),this.$.bind("mousewheel DOMMouseScroll",l)},this.init=function(){(this.v<this.o.min||this.v>this.o.max)&&(this.v=this.o.min),this.$.val(this.v),this.w2=this.w/2,this.cursorExt=this.o.cursor/100,this.xy=this.w2*this.scale,this.lineWidth=this.xy*this.o.thickness,this.lineCap=this.o.lineCap,this.radius=this.xy-this.lineWidth/2,this.o.angleOffset&&(this.o.angleOffset=isNaN(this.o.angleOffset)?0:this.o.angleOffset),this.o.angleArc&&(this.o.angleArc=isNaN(this.o.angleArc)?this.PI2:this.o.angleArc),this.angleOffset=this.o.angleOffset*Math.PI/180,this.angleArc=this.o.angleArc*Math.PI/180,this.startAngle=1.5*Math.PI+this.angleOffset,this.endAngle=1.5*Math.PI+this.angleOffset+this.angleArc;var t=n(String(Math.abs(this.o.max)).length,String(Math.abs(this.o.min)).length,2)+2;this.o.displayInput&&this.i.css({width:(this.w/2+4>>0)+"px",height:(this.w/3>>0)+"px",position:"absolute","vertical-align":"middle","margin-top":(this.w/3>>0)+"px","margin-left":"-"+(3*this.w/4+2>>0)+"px",border:0,background:"none",font:this.o.fontWeight+" "+(this.w/t>>0)+"px "+this.o.font,"text-align":"center",color:this.o.inputColor||this.o.fgColor,padding:"0px","-webkit-appearance":"none"})||this.i.css({width:"0px",visibility:"hidden"})},this.change=function(t){this.cv=t,this.$.val(this.o.format(t))},this.angle=function(t){return(t-this.o.min)*this.angleArc/(this.o.max-this.o.min)},this.arc=function(t){var e,n;return t=this.angle(t),this.o.flip?(e=this.endAngle+1e-5,n=e-t-1e-5):(e=this.startAngle-1e-5,n=e+t+1e-5),this.o.cursor&&(e=n-this.cursorExt)&&(n+=this.cursorExt),{s:e,e:n,d:this.o.flip&&!this.o.cursor}},this.draw=function(){var t,e=this.g,n=this.arc(this.cv),i=1;e.lineWidth=this.lineWidth,e.lineCap=this.lineCap,"none"!==this.o.bgColor&&(e.beginPath(),e.strokeStyle=this.o.bgColor,e.arc(this.xy,this.xy,this.radius,this.endAngle-1e-5,this.startAngle+1e-5,!0),e.stroke()),this.o.displayPrevious&&(t=this.arc(this.v),e.beginPath(),e.strokeStyle=this.pColor,e.arc(this.xy,this.xy,this.radius,t.s,t.e,t.d),e.stroke(),i=this.cv==this.v),e.beginPath(),e.strokeStyle=i?this.o.fgColor:this.fgColor,e.arc(this.xy,this.xy,this.radius,n.s,n.e,n.d),e.stroke()},this.cancel=function(){this.val(this.v)}},t.fn.dial=t.fn.knob=function(n){return this.each(function(){var i=new e.Dial;i.o=n,i.$=t(this),i.run()}).parent()}}),function(t){"use strict";var e={change:t.noop},n=function(e,n){var i=t(e),r=i.val()||0;i.next("output").text(r),n&&(i.data("cb")||t.noop)()},i={change:function(t){this.data("cb",t)},value:function(e){t(this).val(e||0),n(this,!1)},init:function(i){var r=t.extend(e,i||{});return this.each(function(){{var e=t(this),i=e.data("config")||{};t.extend(r,i)}e.wrap(t("<div/>",{"class":"rs-slider"})),e.after(t("<output/>",{"class":"rangevalue"})),e.on("change, input",function(){n(this,!0)}),n(this,!1)})}};t.fn.rsSlider=function(e){return i[e]?i[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void t.error("Method "+e+" does not exist in jQuery.rsSlider"):i.init.apply(this,arguments)}}(jQuery),gDemoSongs=[{name:"sway",description:" SWAY by m @ Bits'n'Bites, from the 4k demo <a href=\"http://pouet.net/prod.php?which=59203\">SWAY</a>",data:String.fromCharCode(83,66,111,120,8,2,237,154,65,107,19,65,20,199,255,179,51,179,141,166,49,197,82,161,66,48,80,164,122,235,65,177,7,193,67,114,244,86,61,89,232,161,158,84,12,38,177,32,107,183,75,65,171,165,39,167,244,32,4,161,244,27,120,20,84,122,243,43,120,242,27,120,241,30,103,179,219,180,221,100,119,74,117,179,89,120,191,201,236,219,183,111,19,94,38,111,231,237,155,236,251,25,224,170,245,216,3,255,225,65,99,87,112,40,24,159,253,214,250,163,236,7,182,100,22,211,112,161,165,110,192,68,33,104,246,5,12,195,113,182,60,221,55,221,117,215,27,182,143,148,153,54,216,23,12,246,88,255,177,170,173,171,177,239,107,32,117,138,37,195,9,215,78,248,225,68,252,114,144,15,154,161,116,35,122,211,109,56,77,119,45,245,248,41,197,30,239,181,98,37,198,94,197,77,84,48,91,206,58,126,74,197,233,114,130,185,172,125,124,145,96,63,140,139,159,213,156,196,79,195,129,211,208,175,56,57,246,241,239,194,109,234,87,84,182,61,120,109,52,95,129,32,146,232,190,100,232,62,7,131,176,231,124,221,186,196,216,252,125,169,247,88,15,171,191,119,44,135,162,250,91,53,68,87,99,63,16,138,98,129,32,8,130,200,37,59,65,191,43,46,214,241,69,130,253,222,66,245,153,156,18,58,111,91,220,226,194,207,238,220,111,128,236,33,204,217,112,55,162,143,34,75,154,234,214,185,179,101,115,21,241,95,141,234,78,36,85,255,149,82,227,238,127,214,119,82,38,255,235,103,26,123,117,180,81,81,61,15,241,67,16,68,62,177,190,123,186,239,92,6,158,182,182,241,78,50,171,176,60,179,184,43,31,22,120,176,170,62,216,98,62,169,145,243,145,104,230,220,255,172,199,255,138,193,44,147,237,139,116,45,18,4,65,156,15,142,13,240,250,6,216,79,33,110,176,59,130,89,181,214,235,175,53,123,222,95,68,247,243,54,15,165,159,193,153,240,27,55,215,85,42,131,154,252,127,16,239,191,82,121,241,61,207,36,196,15,253,249,65,16,4,17,199,35,15,88,241,38,129,73,212,122,69,122,183,140,234,18,127,43,122,25,156,7,25,60,148,128,144,34,174,182,250,164,39,219,143,186,119,122,114,175,175,239,135,122,218,79,94,73,211,242,98,45,217,156,228,127,71,111,221,49,255,33,51,31,127,227,61,163,201,255,125,28,4,82,139,253,1,61,109,76,225,51,107,176,119,66,127,59,161,191,81,61,99,254,241,234,32,8,98,172,107,242,15,59,96,191,60,61,205,46,99,133,127,150,140,95,223,186,87,219,227,29,187,127,138,95,151,7,213,121,144,197,99,166,228,104,166,216,28,241,55,41,26,150,119,151,13,115,213,155,211,234,246,201,204,189,62,10,255,13,182,149,4,123,5,217,63,163,110,90,93,191,101,200,36,38,255,183,13,246,118,138,227,15,195,248,15,137,159,1,76,119,130,107,52,25,17,4,113,94,186,79,152,238,96,144,19,7,65,77,14,107,106,73,222,62,122,68,253,248,81,245,193,35,167,160,229,79,130,32,8,130,24,61,127,1)},{name:"rechord",description:" re:chord by m @ Bits'n'Bites, from the 4k demo <a href=\"http://www.pouet.net/prod.php?which=60915\">re:chord</a>",base64:"U0JveAgC7ZpRa9NQFMfPzU0ycZ0gOEWYo6CC4AaDPakPPgk-TPDBtz34oEMRQcZkdJTZMEdLSUhDQrexSV_9AH6BoU9-Cz-DH8B6bpKmN0nTTGVNiueXnp5zc9v03Jvb_O9N254HWFR-GaD0jSsA2vICIEoFKuv32COFJTauii2IYAQ1OcJH3Y_rMIjKzrYc4WPTj7dgWqjBW9mw099hz0e2PdlsKpXx5cvL6fIb7PbIsPs38Bxs4Bl45Vux-SdJ5k8QBFEc_Csq-anB8dpVvQvPZhiff8iqK3xJlVXcf6WqoYIHcfCcxszxTsLbCe_l-LHXXj6-vmrkH6Od4c2MfK3Qd0LvJryTKJ8npuM5MbM9W7Zz175_fH_bdu2YWY4lzOy4HWFl_yYV3f85wz8aq1l0j3vHMTv6dCTs8KR3IoyulQRRXlDF0d4zgCdX15QdnSkLvVurDXVFHSj2UM2Hqj5KyWuJ8qRX4nM59QdnXpMHbIZ-q6D853LyX6PBSxAEQQglBwNVHJerfQ2u-1P7_k-4MahlyugNa7IP6XmpJbR3plV1SYjy90Q82OXRWCEIgiBKSR_X4_0PqMyqfseX9kug3Lx9MVTyELFfioGNEPJWjk0rQf6tFg0VgiAIopRr8pcG8O-GBqDp9-GbzvgiKEuevqMHK_JgZS7fWc_6lbyBeufAYczbki87u9DEPLuS3wcLfQPLnSnInyAIgvhPldy1gP0w_L_LPOdfNMYftNRrB9zQQ9Xmvo7zQL1VTdX0GbGlj-RkfIK4LW1PoCWzOfXrf3i8LmYeWDEqPpvTtgs5beuiTdP8wwEzGkMi8grs77-hjaPcjfW_gzNBMad1cSbolr7_90MLqOMMNo18Y2pvRL2Z8dpJsOfPxofzciOMPmbkPGhrU9rXjJ3PdJsIoqyw09cMnr4A9liFz0LPFZ3pq7vRZY1Jz0GU3CMrNkEQBEEQk-U3"},{name:"spacedust",description:" Space Dust by m @ Bits'n'Bites",data:String.fromCharCode(83,66,111,120,8,2,237,154,79,107,19,65,24,198,159,249,179,187,145,52,22,69,161,32,74,160,74,35,30,75,209,67,123,170,244,228,69,208,91,15,241,28,197,67,23,33,68,210,96,13,41,161,151,176,233,178,49,13,1,79,138,31,64,240,32,185,121,240,11,136,159,192,111,161,179,219,77,92,154,29,247,160,197,157,240,254,178,79,158,77,38,153,188,51,236,206,203,187,155,147,21,224,6,175,186,96,19,183,0,44,99,21,27,130,241,157,143,27,247,14,197,129,180,109,238,48,198,69,82,18,176,66,71,10,94,224,191,9,252,227,64,231,56,103,74,25,237,119,50,218,253,225,96,52,28,4,67,157,35,231,244,252,126,224,247,61,95,231,121,143,191,131,70,164,69,164,219,239,4,121,143,241,127,159,191,197,140,19,120,121,53,223,199,127,81,173,64,197,200,147,251,145,135,35,43,149,112,19,75,106,231,130,146,133,91,8,23,81,134,181,240,171,21,165,219,32,136,191,64,76,92,165,22,7,94,84,134,124,199,98,188,248,238,210,122,77,28,56,97,107,156,193,229,84,22,108,156,238,207,247,212,232,152,61,19,205,174,217,241,215,219,139,21,127,207,55,43,126,195,15,127,52,105,49,36,8,99,225,213,35,165,150,196,21,199,217,196,35,155,137,171,159,156,7,95,228,19,153,200,228,243,74,233,169,49,219,204,172,173,154,179,173,137,174,129,235,90,125,182,213,209,14,61,166,141,30,70,120,79,135,58,65,16,196,162,242,211,101,74,96,144,118,116,249,138,95,100,172,188,98,253,46,218,25,103,124,234,179,71,74,71,94,134,242,142,62,118,83,70,160,27,151,217,241,19,4,65,16,89,236,158,106,83,58,215,163,50,252,199,87,148,159,90,142,156,182,51,22,93,75,231,44,129,38,103,120,113,238,155,119,207,228,76,98,122,252,4,65,16,196,34,35,182,92,136,215,225,125,242,146,93,139,106,242,37,20,30,62,179,171,118,242,83,225,159,221,166,178,52,61,141,207,188,30,197,126,18,61,251,248,96,64,77,110,50,111,53,243,63,136,231,63,239,244,52,239,135,227,48,225,222,64,214,125,242,6,8,130,32,206,41,147,99,31,226,254,62,216,119,41,43,236,174,202,213,219,123,47,63,111,219,107,103,235,110,161,74,113,62,85,86,54,212,121,238,171,239,20,31,143,35,55,54,209,155,30,63,65,16,4,145,193,164,165,116,116,25,223,106,123,93,118,104,51,94,216,189,86,238,91,143,11,127,250,82,90,50,127,158,241,67,175,104,174,9,130,32,8,226,159,243,11)},{name:"8bit",description:" 8 Bit One by m @ Bits'n'Bites",data:String.fromCharCode(83,66,111,120,8,2,237,219,49,107,219,64,20,7,240,119,58,217,130,144,216,201,226,146,33,32,98,74,218,177,93,186,52,99,200,84,58,36,75,72,134,102,78,178,9,99,227,202,85,13,65,180,8,19,115,56,24,211,16,98,2,249,16,89,252,141,2,25,187,56,119,82,228,154,243,112,14,4,91,46,255,31,247,116,122,150,100,206,135,204,227,140,220,120,67,84,224,3,143,248,32,32,34,103,185,36,183,100,13,137,220,109,190,97,51,139,89,234,133,180,55,17,151,189,81,107,181,133,140,206,168,253,138,90,157,80,157,35,35,237,155,50,90,99,253,188,181,59,221,81,139,90,237,110,116,33,70,45,148,113,174,206,145,145,246,106,206,162,177,30,0,0,96,30,172,192,35,235,135,87,36,218,43,255,228,77,89,191,223,221,89,238,65,238,208,73,106,184,170,226,106,203,141,239,20,106,121,83,203,235,250,5,149,108,205,196,185,150,7,90,94,211,47,240,178,53,254,208,112,188,142,155,29,0,224,255,172,228,223,60,21,43,68,199,31,191,179,223,14,227,111,247,45,55,180,143,248,75,43,121,207,144,95,107,249,149,150,247,181,252,102,198,51,209,53,228,250,120,255,24,198,123,61,227,241,247,12,199,77,227,233,227,203,0,0,176,144,248,223,136,248,167,128,211,26,95,125,79,123,114,77,254,120,203,118,190,228,215,243,234,232,191,74,110,126,167,122,178,14,111,80,195,151,251,141,120,201,237,171,165,108,173,42,247,107,153,159,137,90,178,14,247,201,175,203,125,63,94,114,203,207,84,165,106,69,238,87,113,171,0,0,64,54,13,61,38,131,24,217,249,114,188,72,47,48,230,166,7,153,68,86,188,53,18,73,196,77,76,230,98,81,39,40,249,28,66,224,86,1,0,128,108,10,146,248,108,47,109,210,125,142,216,67,72,238,105,110,213,78,43,121,98,154,146,39,198,67,76,228,0,0,0,240,234,226,39,222,130,160,72,228,20,182,232,216,102,252,67,143,206,78,236,175,246,243,170,252,249,247,245,41,10,57,158,93,7,0,0,152,189,129,151,4,57,165,221,184,180,171,127,161,97,90,0,0,0,22,195,19)},{name:"4chordsong",description:" 4 Chord Song by m @ Bits'n'Bites, chord test inspired by <a href=\"http://www.youtube.com/watch?v=5pidokakU4I\">Axis of Awsome</a>",data:String.fromCharCode(83,66,111,120,8,2,237,153,65,107,19,81,16,199,231,189,151,77,2,105,14,90,8,138,72,115,80,170,168,24,76,3,70,237,161,164,90,176,74,245,166,168,72,169,199,80,2,45,24,66,36,123,168,49,100,27,82,210,96,212,196,80,20,36,8,222,252,0,30,252,22,130,31,64,4,63,130,190,236,190,109,195,146,237,174,77,163,151,255,111,102,24,246,205,16,102,103,55,12,239,237,167,179,68,19,252,134,78,124,81,23,68,39,194,115,52,45,24,127,190,196,227,122,224,36,39,98,140,9,226,140,145,47,74,125,89,43,229,10,36,101,181,176,86,36,41,185,98,46,79,82,178,249,156,65,150,148,149,84,148,108,40,169,43,169,42,177,243,237,188,134,146,154,18,59,223,206,139,202,26,246,179,139,210,230,165,37,165,101,164,205,12,248,57,31,245,239,119,239,27,213,202,22,141,72,212,99,61,229,18,207,140,220,127,11,247,254,91,184,247,127,175,206,225,22,221,237,127,70,245,255,186,180,132,122,30,9,185,122,158,0,0,0,28,20,241,109,155,248,186,30,36,10,70,22,104,94,78,242,196,179,200,185,219,193,227,65,198,184,226,112,38,249,184,239,196,158,24,110,126,153,110,209,85,229,211,202,95,51,253,34,93,246,81,127,163,213,54,181,241,242,181,169,205,86,219,212,102,171,99,234,184,38,185,205,2,94,86,0,0,0,67,224,73,185,39,191,160,203,105,157,138,117,233,81,136,137,163,211,20,79,104,179,26,27,192,207,48,47,41,95,80,190,168,124,94,249,178,195,87,28,222,222,219,85,29,215,198,238,158,209,162,230,184,182,55,195,17,151,186,236,245,83,46,241,148,163,126,55,202,30,113,195,35,94,247,136,71,60,226,15,240,178,2,0,0,24,2,251,162,247,141,17,77,76,94,162,87,26,19,167,219,137,116,86,36,133,25,101,150,249,161,108,212,77,45,87,107,166,86,140,186,169,21,99,203,84,231,164,207,57,38,61,0,0,0,0,254,30,241,93,151,195,116,157,104,50,44,166,232,67,128,241,99,119,143,172,220,209,158,6,213,164,231,140,11,30,240,241,75,239,149,239,42,191,163,124,103,96,189,165,178,186,244,209,244,77,149,213,161,222,200,119,18,243,56,158,94,153,58,88,253,61,31,245,247,232,243,184,31,84,204,35,62,243,191,251,239,245,117,32,59,226,153,70,11,127,86,0,0,24,62,201,223,173,50,246,88,238,203,179,20,222,161,165,16,19,247,223,240,248,25,109,205,26,222,76,217,8,108,163,201,0,0,0,192,24,217,180,236,119,183,219,165,164,220,129,95,249,69,203,247,216,91,245,105,156,249,30,228,47,208,74,0,0,0,224,223,211,63,93,255,33,247,228,244,53,242,147,102,195,196,181,205,155,233,39,218,195,208,94,138,191,89,238,117,58,90,66,175,1,0,0,128,67,231,15)}],gInstrumentPresets=[{name:"====[LEADS]===="},{name:"Softy",i:[2,100,128,0,3,201,128,0,0,0,5,6,58,0,195,6,1,2,135,0,0,32,147,6,121,6]},{name:"Classic 8-bit",i:[1,192,128,0,1,191,116,9,0,0,6,22,34,0,69,3,1,1,23,167,0,32,77,6,25,6]},{name:"Square",i:[1,255,128,0,1,154,128,9,0,0,7,5,52,0,0,0,0,2,255,0,0,32,47,3,146,2]},{name:"Bell",i:[0,255,152,0,0,255,152,12,0,0,2,0,60,0,0,0,0,2,255,0,0,32,47,3,157,2]},{name:"Filter Bass 1",i:[2,100,128,0,3,201,128,0,0,0,0,6,29,0,195,4,1,3,50,184,119,244,147,6,84,6]},{name:"====[PADS]===="},{name:"Base string",i:[2,192,128,0,2,192,140,18,0,0,158,119,158,0,0,0,0,2,5,0,0,32,0,0,24,8]},{name:"Base string (dist)",i:[2,192,128,0,2,192,140,18,0,0,107,115,138,0,136,5,1,2,8,92,21,32,148,5,85,8]},{name:"Evil brass",i:[3,146,140,0,1,224,128,3,0,0,92,0,95,3,179,5,1,2,124,135,11,32,150,3,157,6]},{name:"====[DRUMS]===="},{name:"Bass drum 1",i:[0,255,116,1,0,255,116,0,1,0,4,6,35,0,0,0,0,2,14,0,0,32,0,0,0,0]},{name:"Bass drum 2",i:[0,255,117,1,0,255,110,0,1,0,4,6,35,0,0,0,0,2,14,0,1,39,76,5,0,0]},{name:"Bass drum 3",i:[0,255,116,1,0,255,116,0,1,14,4,6,45,0,0,0,0,2,136,15,0,32,0,0,66,6]},{name:"Base tom",i:[0,192,104,1,0,80,99,0,0,0,4,0,66,3,0,0,0,1,0,1,2,32,37,4,0,0]},{name:"Snare 1",i:[0,160,128,1,0,160,128,0,1,210,4,7,41,0,60,4,1,2,255,0,0,32,61,5,32,6]},{name:"Snare 2",i:[0,221,128,1,0,210,128,0,1,255,4,6,62,0,64,7,1,3,255,15,0,32,20,0,24,6]},{name:"Snare 3",i:[3,0,128,0,3,68,128,0,1,218,4,4,40,1,55,4,1,2,67,115,124,190,67,6,39,1]},{name:"Hihat 1",i:[0,0,140,0,0,0,140,0,0,60,4,10,34,0,187,5,0,1,239,135,0,32,108,5,16,4]},{name:"Hihat 2",i:[2,40,140,1,0,0,140,0,0,255,5,0,48,0,0,0,0,3,161,192,0,32,0,0,71,1]},{name:"Open hihat",i:[0,0,128,0,0,0,128,0,0,125,0,1,59,0,0,0,0,1,193,171,0,29,39,3,88,3]},{name:"Smash",i:[0,214,104,1,0,204,104,0,1,229,4,40,21,0,231,6,1,3,183,15,0,32,232,4,74,6]},{name:"Pipe hit",i:[3,255,128,0,0,255,140,0,0,127,2,2,23,0,96,3,1,3,94,79,0,32,84,2,12,4]},{name:"====[F/X]===="},{name:"Wind",i:[0,0,140,0,0,0,140,0,0,255,158,158,158,0,51,2,1,2,58,239,0,32,88,1,157,2]},{name:"Long beat",i:[0,255,106,1,0,255,106,0,1,0,5,7,164,0,0,0,0,2,255,0,2,32,83,5,25,1]},{name:"Siren",i:[1,0,128,0,1,0,128,0,0,255,158,100,158,3,67,4,1,3,57,254,85,171,88,1,157,2]}];var CPlayer=function(){var t,e,n=new Worker("tracker/js/player-worker.js");n.onmessage=function(n){"progress"===n.data.cmd&&(e=n.data.buffer,t&&t(n.data.progress))},this.generate=function(e,i,r){t=r,n.postMessage({cmd:"generate",song:e,opts:i})},this.createWave=function(){var t=e,n=t.length,i=2*n-8,r=i-36,o=44,s=new Uint8Array(o+2*n);s.set([82,73,70,70,255&i,i>>8&255,i>>16&255,i>>24&255,87,65,86,69,102,109,116,32,16,0,0,0,1,0,2,0,68,172,0,0,16,177,2,0,4,0,16,0,100,97,116,97,255&r,r>>8&255,r>>16&255,r>>24&255]);for(var a=0,l=o;n>a;++a){var c=t[a];c=-32767>c?-32767:c>32767?32767:c,s[l++]=255&c,s[l++]=c>>8&255}return s},this.getData=function(t,n){for(var i=2*Math.floor(44100*t),r=new Array(n),o=e,s=0;2*n>s;s+=1){var a=i+s;r[s]=t>0&&a<o.length?o[a]/32768:0}return r}},CJammer=function(){var t,e,n,i,r,o,s,a,l,c=8,u=[],d=131072,f=function(t){return Math.sin(6.283184*t)},h=function(t){return 2*(t%1)-1},p=function(t){return.5>t%1?1:-1},g=function(t){var e=t%1*4;return 2>e?e-1:3-e},m=function(t){return 174.614115728/a*Math.pow(2,(t-128)/12)},v=[f,p,h,g],y=function(o,s){var h,p,g,m,y,b,w,E=s.length;for(g=0;E>g;++g)o[g]=0,s[g]=0;for(h=0;c>h;++h){var x=u[h];if(void 0!=x){var T=v[x.instr[0]],C=x.instr[1],S=x.instr[3],_=v[x.instr[4]],I=x.instr[5],D=x.instr[8],O=x.instr[9],A=Math.round(x.instr[10]*x.instr[10]*4*l),L=Math.round(x.instr[11]*x.instr[11]*4*l),N=Math.round(x.instr[12]*x.instr[12]*4*l),P=1/N,k=x.o1f,$=x.o2f,R=x.o1t,B=x.o2t,F=A+L+N-x.env;for(E>=F?u[h]=void 0:F=E,p=x.env,g=0;F>g;p++,g++)y=1,A>p?y=p/A:p>=A+L&&(y-=(p-A-L)*P),m=k,S&&(m*=y*y),R+=m,b=T(R)*C,m=$,D&&(m*=y*y),B+=m,b+=_(B)*I,O&&(b+=(2*Math.random()-1)*O),s[g]+=.002441481*b*y;x.env=p,x.o1t=R,x.o2t=B}}var M,U,j,X=n.pos,V=n.low,Y=n.band,H=n.filterActive,q=n.dlyPos,W=d-1,z=v[t[13]],Q=t[14]/512,G=Math.pow(2,t[15]-9)/e,J=t[16],K=t[17],Z=43.23529*t[18]*3.141592/a,tt=1-t[19]/255,et=1e-5*t[20]*32767,nt=t[21]/32,it=t[22]/512,rt=6.283184*Math.pow(2,t[23]-9)/e,ot=t[24]/255,st=t[25]*e>>1;for(st>=d&&(st=d-1),p=0;E>p;p++)g=2*(X+p),b=s[p],b||H?(w=Z,J&&(w*=z(G*g)*Q+.5),w=1.5*Math.sin(w),V+=w*Y,U=tt*(b-Y)-V,Y+=w*U,b=3==K?Y:1==K?U:V,et&&(b*=et,b=1>b?b>-1?f(.25*b):-1:1,b/=et),b*=nt,H=b*b>1e-5,m=Math.sin(rt*g)*it+.5,M=b*(1-m),b*=m):M=0,j=q-st&W,M+=r[j]*ot,b+=i[j]*ot,i[q]=M,r[q]=b,q=q+1&W,o[p]=M,s[p]=b;for(X+=E;X>2048*e;)X-=2048*e;n.pos=X,n.low=V,n.band=Y,n.filterActive=H,n.dlyPos=q};this.start=function(){if(window.AudioContext)o=new AudioContext;else{if(!window.webkitAudioContext)return void(o=void 0);o=new webkitAudioContext,o.createScriptProcessor=o.createJavaScriptNode}a=o.sampleRate,l=a/44100,n={pos:0,low:0,band:0,filterActive:!1,dlyPos:0},i=new Float32Array(d),r=new Float32Array(d),s=o.createScriptProcessor(2048,0,2),s.onaudioprocess=function(t){var e=t.outputBuffer.getChannelData(0),n=t.outputBuffer.getChannelData(1);y(e,n)},s.connect(o.destination)},this.stop=function(){},this.updateInstr=function(e){t=[];for(var n=0;n<e.length;++n)t.push(e[n])},this.updateRowLen=function(t){e=Math.round(t*l)},this.addNote=function(e){var n,i=(new Date).getTime(),r={startT:i,env:0,o1t:0,o2t:0,o1f:m(e+t[2]-128),o2f:m(e+t[6]-128)*(1+8e-4*t[7]),instr:new Array(13)};for(n=0;13>n;++n)r.instr[n]=t[n];var o=0,s=-100;for(n=0;c>n;++n){if(void 0==u[n])return void(u[n]=r);var a=i-u[n].startT;a>s&&(o=n,s=a)}u[o]=r}};if(function(){function t(){this.fc=0,this.dl=0}function e(){this.dyn_tree=null,this.static_tree=null,this.extra_bits=null,this.extra_base=0,this.elems=0,this.max_length=0,this.max_code=0}function n(t,e,n,i){this.good_length=t,this.max_lazy=e,this.nice_length=n,this.max_chain=i}function i(){this.next=null,this.len=0,this.ptr=[],this.off=0}function r(n){var i;if(n?1>n?n=1:n>9&&(n=9):n=zt,pt=n,H=!1,ut=!1,null===_e){for(X=V=Y=null,_e=[],Q=[],G=[],J=[],K=[],vt=[],i=0;Ce>i;i++)vt[i]=new t;for(yt=[],i=0;2*be+1>i;i++)yt[i]=new t;for(bt=[],i=0;ye+2>i;i++)bt[i]=new t;for(wt=[],i=0;be>i;i++)wt[i]=new t;for(Et=[],i=0;2*we+1>i;i++)Et[i]=new t;xt=new e,Tt=new e,Ct=new e,St=[],_t=[],Ot=[],At=[],Lt=[],Nt=[],Pt=[],kt=[]}}function o(t){t.next=X,X=t}function s(){var t;return null!==X?(t=X,X=X.next):t=new i,t.next=null,t.len=t.off=0,t}function a(t){return K[Yt+t]}function l(t,e){return K[Yt+t]=e}function c(t){_e[W+q++]=t,W+q===Jt&&U()}function u(t){t&=65535,Jt-2>W+q?(_e[W+q++]=255&t,_e[W+q++]=t>>>8):(c(255&t),c(t>>>8))}function d(){nt=(nt<<Se^255&Q[lt+Zt-1])&se,it=a(nt),K[lt&ae]=it,l(nt,lt)}function f(t,e){B(e[t].fc,e[t].dl)}function h(t){return 255&(256>t?Lt[t]:Lt[256+(t>>7)])}function p(t,e,n){return t[e].fc<t[n].fc||t[e].fc===t[n].fc&&Ot[e]<=Ot[n]}function g(t,e,n){var i;for(i=0;n>i&&Vt<Xt.length;i++)t[e+i]=255&Xt[Vt++];return i}function m(){var t;for(t=0;oe>t;t++)K[Yt+t]=0;if(ht=Le[pt].max_lazy,gt=Le[pt].good_length,Qt||(mt=Le[pt].nice_length),ft=Le[pt].max_chain,lt=0,et=0,dt=g(Q,0,2*Yt),0>=dt)return ut=!0,void(dt=0);for(ut=!1;ue>dt&&!ut;)y();for(nt=0,t=0;Zt-1>t;t++)nt=(nt<<Se^255&Q[t])&se}function v(t){var e,n,i,r,o=ft,s=lt,a=at,l=lt>de?lt-de:le,c=lt+te,u=Q[s+a-1],d=Q[s+a];at>=gt&&(o>>=2);do if(e=t,Q[e+a]===d&&Q[e+a-1]===u&&Q[e]===Q[s]&&Q[++e]===Q[s+1]){for(s+=2,e++;c>s;){for(r=!1,i=0;8>i;i+=1)if(s+=1,e+=1,Q[s]!==Q[e]){r=!0;break}if(r)break}if(n=te-(c-s),s=c-te,n>a){if(ct=t,a=n,Qt){if(n>=te)break}else if(n>=mt)break;u=Q[s+a-1],d=Q[s+a]}}while((t=K[t&ae])>l&&0!==--o);return a}function y(){var t,e,n=Kt-dt-lt;if(-1===n)n--;else if(lt>=Yt+de){for(t=0;Yt>t;t++)Q[t]=Q[t+Yt];for(ct-=Yt,lt-=Yt,et-=Yt,t=0;oe>t;t++)e=a(t),l(t,e>=Yt?e-Yt:le);for(t=0;Yt>t;t++)e=K[t],K[t]=e>=Yt?e-Yt:le;n+=Yt}ut||(t=g(Q,lt+dt,n),0>=t?ut=!0:dt+=t)}function b(){for(;0!==dt&&null===V;){var t;if(d(),it!==le&&de>=lt-it&&(st=v(it),st>dt&&(st=dt)),st>=Zt)if(t=$(lt-ct,st-Zt),dt-=st,ht>=st){st--;do lt++,d();while(0!==--st);lt++}else lt+=st,st=0,nt=255&Q[lt],nt=(nt<<Se^255&Q[lt+1])&se;else t=$(0,255&Q[lt]),dt--,lt++;for(t&&(k(0),et=lt);ue>dt&&!ut;)y()}}function w(){for(;0!==dt&&null===V;){if(d(),at=st,rt=ct,st=Zt-1,it!==le&&ht>at&&de>=lt-it&&(st=v(it),st>dt&&(st=dt),st===Zt&&lt-ct>ce&&st--),at>=Zt&&at>=st){var t;t=$(lt-1-rt,at-Zt),dt-=at-1,at-=2;do lt++,d();while(0!==--at);ot=!1,st=Zt-1,lt++,t&&(k(0),et=lt)}else ot?($(0,255&Q[lt-1])&&(k(0),et=lt),lt++,dt--):(ot=!0,lt++,dt--);for(;ue>dt&&!ut;)y()}}function E(){ut||(Z=0,tt=0,C(),m(),V=null,q=0,W=0,3>=pt?(at=Zt-1,st=0):(st=Zt-1,ot=!1),z=!1)}function x(t,e,n){var i;return H||(E(),H=!0,0!==dt)?(i=T(t,e,n),i===n?n:z?i:(3>=pt?b():w(),0===dt&&(ot&&$(0,255&Q[lt-1]),k(1),z=!0),i+T(t,i+e,n-i))):(z=!0,0)}function T(t,e,n){var i,r,s;for(i=0;null!==V&&n>i;){for(r=n-i,r>V.len&&(r=V.len),s=0;r>s;s++)t[e+i+s]=V.ptr[V.off+s];if(V.off+=r,V.len-=r,i+=r,0===V.len){var a;a=V,V=V.next,o(a)}}if(i===n)return i;if(q>W){for(r=n-i,r>q-W&&(r=q-W),s=0;r>s;s++)t[e+i+s]=_e[W+s];W+=r,i+=r,q===W&&(q=W=0)}return i}function C(){var t,e,n,i,r;if(0===wt[0].dl){for(xt.dyn_tree=vt,xt.static_tree=bt,xt.extra_bits=Ie,xt.extra_base=me+1,xt.elems=ye,xt.max_length=he,xt.max_code=0,Tt.dyn_tree=yt,Tt.static_tree=wt,Tt.extra_bits=De,Tt.extra_base=0,Tt.elems=be,Tt.max_length=he,Tt.max_code=0,Ct.dyn_tree=Et,Ct.static_tree=null,Ct.extra_bits=Oe,Ct.extra_base=0,Ct.elems=we,Ct.max_length=pe,Ct.max_code=0,n=0,i=0;ge-1>i;i++)for(Nt[i]=n,t=0;t<1<<Ie[i];t++)At[n++]=i;for(At[n-1]=i,r=0,i=0;16>i;i++)for(Pt[i]=r,t=0;t<1<<De[i];t++)Lt[r++]=i;for(r>>=7;be>i;i++)for(Pt[i]=r<<7,t=0;t<1<<De[i]-7;t++)Lt[256+r++]=i;for(e=0;he>=e;e++)St[e]=0;for(t=0;143>=t;)bt[t++].dl=8,St[8]++;for(;255>=t;)bt[t++].dl=9,St[9]++;for(;279>=t;)bt[t++].dl=7,St[7]++;for(;287>=t;)bt[t++].dl=8,St[8]++;for(D(bt,ye+1),t=0;be>t;t++)wt[t].dl=5,wt[t].fc=F(t,5);S()}}function S(){var t;for(t=0;ye>t;t++)vt[t].fc=0;for(t=0;be>t;t++)yt[t].fc=0;for(t=0;we>t;t++)Et[t].fc=0;vt[ve].fc=1,Ut=jt=0,$t=Rt=Bt=0,Ft=0,Mt=1}function _(t,e){for(var n=_t[e],i=e<<1;It>=i&&(It>i&&p(t,_t[i+1],_t[i])&&i++,!p(t,n,_t[i]));)_t[e]=_t[i],e=i,i<<=1;_t[e]=n}function I(t){var e,n,i,r,o,s,a=t.dyn_tree,l=t.extra_bits,c=t.extra_base,u=t.max_code,d=t.max_length,f=t.static_tree,h=0;for(r=0;he>=r;r++)St[r]=0;for(a[_t[Dt]].dl=0,e=Dt+1;Ce>e;e++)n=_t[e],r=a[a[n].dl].dl+1,r>d&&(r=d,h++),a[n].dl=r,n>u||(St[r]++,o=0,n>=c&&(o=l[n-c]),s=a[n].fc,Ut+=s*(r+o),null!==f&&(jt+=s*(f[n].dl+o)));if(0!==h){do{for(r=d-1;0===St[r];)r--;St[r]--,St[r+1]+=2,St[d]--,h-=2}while(h>0);for(r=d;0!==r;r--)for(n=St[r];0!==n;)i=_t[--e],i>u||(a[i].dl!==r&&(Ut+=(r-a[i].dl)*a[i].fc,a[i].fc=r),n--)}}function D(t,e){var n,i,r=[],o=0;for(n=1;he>=n;n++)o=o+St[n-1]<<1,r[n]=o;for(i=0;e>=i;i++){var s=t[i].dl;0!==s&&(t[i].fc=F(r[s]++,s))}}function O(t){var e,n,i=t.dyn_tree,r=t.static_tree,o=t.elems,s=-1,a=o;for(It=0,Dt=Ce,e=0;o>e;e++)0!==i[e].fc?(_t[++It]=s=e,Ot[e]=0):i[e].dl=0;for(;2>It;){var l=_t[++It]=2>s?++s:0;i[l].fc=1,Ot[l]=0,Ut--,null!==r&&(jt-=r[l].dl)}for(t.max_code=s,e=It>>1;e>=1;e--)_(i,e);do e=_t[fe],_t[fe]=_t[It--],_(i,fe),n=_t[fe],_t[--Dt]=e,_t[--Dt]=n,i[a].fc=i[e].fc+i[n].fc,Ot[a]=Ot[e]>Ot[n]+1?Ot[e]:Ot[n]+1,i[e].dl=i[n].dl=a,_t[fe]=a++,_(i,fe);while(It>=2);_t[--Dt]=_t[fe],I(t),D(i,s)}function A(t,e){var n,i,r=-1,o=t[0].dl,s=0,a=7,l=4;for(0===o&&(a=138,l=3),t[e+1].dl=65535,n=0;e>=n;n++)i=o,o=t[n+1].dl,++s<a&&i===o||(l>s?Et[i].fc+=s:0!==i?(i!==r&&Et[i].fc++,Et[Ee].fc++):10>=s?Et[xe].fc++:Et[Te].fc++,s=0,r=i,0===o?(a=138,l=3):i===o?(a=6,l=3):(a=7,l=4))}function L(t,e){var n,i,r=-1,o=t[0].dl,s=0,a=7,l=4;for(0===o&&(a=138,l=3),n=0;e>=n;n++)if(i=o,o=t[n+1].dl,!(++s<a&&i===o)){if(l>s){do f(i,Et);while(0!==--s)}else 0!==i?(i!==r&&(f(i,Et),s--),f(Ee,Et),B(s-3,2)):10>=s?(f(xe,Et),B(s-3,3)):(f(Te,Et),B(s-11,7));s=0,r=i,0===o?(a=138,l=3):i===o?(a=6,l=3):(a=7,l=4)}}function N(){var t;for(A(vt,xt.max_code),A(yt,Tt.max_code),O(Ct),t=we-1;t>=3&&0===Et[Ae[t]].dl;t--);return Ut+=3*(t+1)+5+5+4,t}function P(t,e,n){var i;for(B(t-257,5),B(e-1,5),B(n-4,4),i=0;n>i;i++)B(Et[Ae[i]].dl,3);L(vt,t-1),L(yt,e-1)}function k(t){var e,n,i,r,o;if(r=lt-et,kt[Bt]=Ft,O(xt),O(Tt),i=N(),e=Ut+3+7>>3,n=jt+3+7>>3,e>=n&&(e=n),e>=r+4&&et>=0)for(B((Ht<<1)+t,3),M(),u(r),u(~r),o=0;r>o;o++)c(Q[et+o]);else n===e?(B((qt<<1)+t,3),R(bt,wt)):(B((Wt<<1)+t,3),P(xt.max_code+1,Tt.max_code+1,i+1),R(vt,yt));S(),0!==t&&M()}function $(t,e){if(J[$t++]=e,0===t?vt[e].fc++:(t--,vt[At[e]+me+1].fc++,yt[h(t)].fc++,G[Rt++]=t,Ft|=Mt),Mt<<=1,0===(7&$t)&&(kt[Bt++]=Ft,Ft=0,Mt=1),pt>2&&0===(4095&$t)){var n,i=8*$t,r=lt-et;for(n=0;be>n;n++)i+=yt[n].fc*(5+De[n]);if(i>>=3,Rt<parseInt($t/2,10)&&i<parseInt(r/2,10))return!0}return $t===ne-1||Rt===re}function R(t,e){var n,i,r,o,s=0,a=0,l=0,c=0;if(0!==$t)do 0===(7&s)&&(c=kt[l++]),i=255&J[s++],0===(1&c)?f(i,t):(r=At[i],f(r+me+1,t),o=Ie[r],0!==o&&(i-=Nt[r],B(i,o)),n=G[a++],r=h(n),f(r,e),o=De[r],0!==o&&(n-=Pt[r],B(n,o))),c>>=1;while($t>s);f(ve,t)}function B(t,e){tt>Ne-e?(Z|=t<<tt,u(Z),Z=t>>Ne-tt,tt+=e-Ne):(Z|=t<<tt,tt+=e)}function F(t,e){var n=0;do n|=1&t,t>>=1,n<<=1;while(--e>0);return n>>1}function M(){tt>8?u(Z):tt>0&&c(Z),Z=0,tt=0}function U(){var t,e;if(0!==q){for(t=s(),null===V?V=Y=t:Y=Y.next=t,t.len=q-W,e=0;e<t.len;e++)t.ptr[e]=_e[W+e];q=W=0}}function j(t,e){var n,i,o;if("string"==typeof t)for(o=t,t=[],n=0;n<o.length;n++)t[n]=o.charCodeAt(n);Xt=t,Vt=0,"undefined"==typeof e&&(e=zt),r(e),i=[];do n=x(i,i.length,1024);while(n>0);for(Xt=null,o="",n=0;n<i.length;n++)o+=String.fromCharCode(i[n]);return o}var X,V,Y,H,q,W,z,Q,G,J,K,Z,tt,et,nt,it,rt,ot,st,at,lt,ct,ut,dt,ft,ht,pt,gt,mt,vt,yt,bt,wt,Et,xt,Tt,Ct,St,_t,It,Dt,Ot,At,Lt,Nt,Pt,kt,$t,Rt,Bt,Ft,Mt,Ut,jt,Xt,Vt,Yt=32768,Ht=0,qt=1,Wt=2,zt=6,Qt=!1,Gt=32768,Jt=8192,Kt=2*Yt,Zt=3,te=258,ee=16,ne=8192,ie=15,re=ne,oe=1<<ie,se=oe-1,ae=Yt-1,le=0,ce=4096,ue=te+Zt+1,de=Yt-ue,fe=1,he=15,pe=7,ge=29,me=256,ve=256,ye=me+1+ge,be=30,we=19,Ee=16,xe=17,Te=18,Ce=2*ye+1,Se=parseInt((ie+Zt-1)/Zt,10),_e=null;ne>Gt&&console.error("error: INBUFSIZ is too small"),Yt<<1>1<<ee&&console.error("error: WSIZE is too large"),ie>ee-1&&console.error("error: HASH_BITS is too large"),(8>ie||258!==te)&&console.error("error: Code too clever");var Ie=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],De=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Oe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Ae=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Le=[new n(0,0,0,0),new n(4,4,8,4),new n(4,5,16,8),new n(4,6,32,32),new n(4,4,16,16),new n(8,16,32,32),new n(8,16,128,128),new n(8,32,128,256),new n(32,128,258,1024),new n(32,258,258,4096)],Ne=16;window.RawDeflate||(window.RawDeflate={}),window.RawDeflate.deflate=j}(),function(){function t(){this.next=null,this.list=null}function e(){this.e=0,this.b=0,this.n=0,this.t=null}function n(n,i,r,o,s,a){this.BMAX=16,this.N_MAX=288,this.status=0,this.root=null,this.m=0;var l,c,u,d,f,h,p,g,m,v,y,b,w,E,x,T,C,S=[],_=[],I=new e,D=[],O=[],A=[];for(C=this.root=null,h=0;h<this.BMAX+1;h++)S[h]=0;for(h=0;h<this.BMAX+1;h++)_[h]=0;for(h=0;h<this.BMAX;h++)D[h]=null;for(h=0;h<this.N_MAX;h++)O[h]=0;for(h=0;h<this.BMAX+1;h++)A[h]=0;c=i>256?n[256]:this.BMAX,m=n,v=0,h=i;do S[m[v]]++,v++;while(--h>0);if(S[0]===i)return this.root=null,this.m=0,void(this.status=0);for(p=1;p<=this.BMAX&&0===S[p];p++);for(g=p,p>a&&(a=p),h=this.BMAX;0!==h&&0===S[h];h--);for(d=h,a>h&&(a=h),E=1<<p;h>p;p++,E<<=1)if((E-=S[p])<0)return this.status=2,void(this.m=a);if((E-=S[h])<0)return this.status=2,void(this.m=a);for(S[h]+=E,A[1]=p=0,m=S,v=1,w=2;--h>0;)A[w++]=p+=m[v++];m=n,v=0,h=0;do 0!==(p=m[v++])&&(O[A[p]++]=h);while(++h<i);for(i=A[d],A[0]=h=0,m=O,v=0,f=-1,b=_[0]=0,y=null,x=0,null;d>=g;g++)for(l=S[g];l-->0;){for(;g>b+_[1+f];){if(b+=_[1+f],f++,x=(x=d-b)>a?a:x,(u=1<<(p=g-b))>l+1)for(u-=l+1,w=g;++p<x&&!((u<<=1)<=S[++w]);)u-=S[w];for(b+p>c&&c>b&&(p=c-b),x=1<<p,_[1+f]=p,y=[],T=0;x>T;T++)y[T]=new e;C=C?C.next=new t:this.root=new t,C.next=null,C.list=y,D[f]=y,f>0&&(A[f]=h,I.b=_[f],I.e=16+p,I.t=y,p=(h&(1<<b)-1)>>b-_[f],D[f-1][p].e=I.e,D[f-1][p].b=I.b,D[f-1][p].n=I.n,D[f-1][p].t=I.t)}for(I.b=g-b,v>=i?I.e=99:m[v]<r?(I.e=m[v]<256?16:15,I.n=m[v++]):(I.e=s[m[v]-r],I.n=o[m[v++]-r]),u=1<<g-b,p=h>>b;x>p;p+=u)y[p].e=I.e,y[p].b=I.b,y[p].n=I.n,y[p].t=I.t;for(p=1<<g-1;0!==(h&p);p>>=1)h^=p;for(h^=p;(h&(1<<b)-1)!==A[f];)b-=_[f],f--}this.m=_[1],this.status=0!==E&&1!==d?1:0}function i(){return O.length===A?-1:255&O[A++]}function r(t){for(;t>w;)b|=i()<<w,w+=8}function o(t){return b&F[t]}function s(t){b>>=t,w-=t}function a(t,e,n){var i,a,l;if(0===n)return 0;for(l=0;;){for(r(I),a=S.list[o(I)],i=a.e;i>16;){if(99===i)return-1;s(a.b),i-=16,r(i),a=a.t[o(i)],i=a.e}if(s(a.b),16!==i){if(15===i)break;for(r(i),T=a.n+o(i),s(i),r(D),a=_.list[o(D)],i=a.e;i>16;){if(99===i)return-1;s(a.b),i-=16,r(i),a=a.t[o(i)],i=a.e}for(s(a.b),r(i),C=g-a.n-o(i),s(i);T>0&&n>l;)T--,C&=L-1,g&=L-1,t[e+l++]=p[g++]=p[C++];if(l===n)return n}else if(g&=L-1,t[e+l++]=p[g++]=a.n,l===n)return n}return E=-1,l}function l(t,e,n){var i;if(i=7&w,s(i),r(16),i=o(16),s(16),r(16),i!==(65535&~b))return-1;

for(s(16),T=i,i=0;T>0&&n>i;)T--,g&=L-1,r(8),t[e+i++]=p[g++]=o(8),s(8);return 0===T&&(E=-1),i}function c(t,e,i){if(!B){var r,o,s=[];for(r=0;144>r;r++)s[r]=8;for(null;256>r;r++)s[r]=9;for(null;280>r;r++)s[r]=7;for(null;288>r;r++)s[r]=8;if(v=7,o=new n(s,288,257,M,U,v),0!==o.status)return console.error("HufBuild error: "+o.status),-1;for(B=o.root,v=o.m,r=0;30>r;r++)s[r]=5;if(y=5,o=new n(s,30,0,j,X,y),o.status>1)return B=null,console.error("HufBuild error: "+o.status),-1;m=o.root,y=o.m}return S=B,_=m,I=v,D=y,a(t,e,i)}function u(t,e,i){var l,c,u,d,f,h,p,g,m,v=[];for(l=0;316>l;l++)v[l]=0;if(r(5),p=257+o(5),s(5),r(5),g=1+o(5),s(5),r(4),h=4+o(4),s(4),p>286||g>30)return-1;for(c=0;h>c;c++)r(3),v[V[c]]=o(3),s(3);for(null;19>c;c++)v[V[c]]=0;if(I=7,m=new n(v,19,19,null,null,I),0!==m.status)return-1;for(S=m.root,I=m.m,d=p+g,l=u=0;d>l;)if(r(I),f=S.list[o(I)],c=f.b,s(c),c=f.n,16>c)v[l++]=u=c;else if(16===c){if(r(2),c=3+o(2),s(2),l+c>d)return-1;for(;c-->0;)v[l++]=u}else if(17===c){if(r(3),c=3+o(3),s(3),l+c>d)return-1;for(;c-->0;)v[l++]=0;u=0}else{if(r(7),c=11+o(7),s(7),l+c>d)return-1;for(;c-->0;)v[l++]=0;u=0}if(I=$,m=new n(v,p,257,M,U,I),0===I&&(m.status=1),0!==m.status&&1!==m.status)return-1;for(S=m.root,I=m.m,l=0;g>l;l++)v[l]=v[l+p];return D=R,m=new n(v,g,0,j,X,D),_=m.root,D=m.m,0===D&&p>257?-1:0!==m.status?-1:a(t,e,i)}function d(){p||(p=[]),g=0,b=0,w=0,E=-1,x=!1,T=C=0,S=null}function f(t,e,n){var i,d;for(i=0;n>i;){if(x&&-1===E)return i;if(T>0){if(E!==N)for(;T>0&&n>i;)T--,C&=L-1,g&=L-1,t[e+i++]=p[g++]=p[C++];else{for(;T>0&&n>i;)T--,g&=L-1,r(8),t[e+i++]=p[g++]=o(8),s(8);0===T&&(E=-1)}if(i===n)return i}if(-1===E){if(x)break;r(1),0!==o(1)&&(x=!0),s(1),r(2),E=o(2),s(2),S=null,T=0}switch(E){case N:d=l(t,e+i,n-i);break;case P:d=S?a(t,e+i,n-i):c(t,e+i,n-i);break;case k:d=S?a(t,e+i,n-i):u(t,e+i,n-i);break;default:d=-1}if(-1===d)return x?0:-1;i+=d}return i}function h(t){var e,n,i=[];if("string"==typeof t)for(n=t,t=[],e=0;e<n.length;e++)t[e]=n.charCodeAt(e);d(),O=t,A=0;do e=f(i,i.length,1024);while(e>0);for(O=null,n="",e=0;e<i.length;e++)n+=String.fromCharCode(i[e]);return n}var p,g,m,v,y,b,w,E,x,T,C,S,_,I,D,O,A,L=32768,N=0,P=1,k=2,$=9,R=6,B=null,F=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],M=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],U=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,99,99],j=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],X=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],V=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];window.RawDeflate||(window.RawDeflate={}),window.RawDeflate.inflate=h}(),"function"!=typeof Blob||"undefined"==typeof URL)if("function"==typeof Blob&&"undefined"!=typeof webkitURL)var URL=webkitURL;else var Blob=function(t){"use strict";var e=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||t.MSBlobBuilder||function(t){var e=function(t){return Object.prototype.toString.call(t).match(/^\[object\s(.*)\]$/)[1]},n=function(){this.data=[]},i=function(t,e,n){this.data=t,this.size=t.length,this.type=e,this.encoding=n},r=n.prototype,o=i.prototype,s=t.FileReaderSync,a=function(t){this.code=this[this.name=t]},l="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),c=l.length,u=t.URL||t.webkitURL||t,d=u.createObjectURL,f=u.revokeObjectURL,h=u,p=t.btoa,g=t.atob,m=!1,v=function(t){m=!t},y=t.ArrayBuffer,b=t.Uint8Array;for(i.fake=o.fake=!0;c--;)a.prototype[l[c]]=c+1;try{b&&v.apply(0,new b(3528e4))}catch(w){}return u.createObjectURL||(h=t.URL={}),h.createObjectURL=function(t){var e,n=t.type;return null===n&&(n="application/octet-stream"),t instanceof i?(e="data:"+n,"base64"===t.encoding?e+";base64,"+t.data:"URI"===t.encoding?e+","+decodeURIComponent(t.data):p?e+";base64,"+p(t.data):e+","+encodeURIComponent(t.data)):d?d.call(u,t):void 0},h.revokeObjectURL=function(t){"data:"!==t.substring(0,5)&&f&&f.call(u,t)},r.append=function(t){var n=this.data;if(b&&(t instanceof y||t instanceof b))if(m)n.push(String.fromCharCode.apply(String,new b(t)));else{for(var r="",o=new b(t),l=0,c=o.length;c>l;l++)r+=String.fromCharCode(o[l]);n.push(r)}else if("Blob"===e(t)||"File"===e(t)){if(!s)throw new a("NOT_READABLE_ERR");var u=new s;n.push(u.readAsBinaryString(t))}else t instanceof i?"base64"===t.encoding&&g?n.push(g(t.data)):"URI"===t.encoding?n.push(decodeURIComponent(t.data)):"raw"===t.encoding&&n.push(t.data):("string"!=typeof t&&(t+=""),n.push(unescape(encodeURIComponent(t))))},r.getBlob=function(t){return arguments.length||(t=null),new i(this.data.join(""),t,"raw")},r.toString=function(){return"[object BlobBuilder]"},o.slice=function(t,e,n){var r=arguments.length;return 3>r&&(n=null),new i(this.data.slice(t,r>1?e:this.data.length),n,this.encoding)},o.toString=function(){return"[object Blob]"},n}(t);return function(t,n){var i=n?n.type||"":"",r=new e;if(t)for(var o=0,s=t.length;s>o;o++)r.append(t[o]);return r.getBlob(i)}}(self);var saveAs=saveAs||navigator.msSaveBlob&&navigator.msSaveBlob.bind(navigator)||function(t){"use strict";var e=t.document,n=function(){return t.URL||t.webkitURL||t},i=t.URL||t.webkitURL||t,r=e.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,s=function(n){var i=e.createEvent("MouseEvents");i.initMouseEvent("click",!0,!1,t,0,0,0,0,0,!1,!1,!1,!1,0,null),n.dispatchEvent(i)},a=t.webkitRequestFileSystem,l=t.requestFileSystem||a||t.mozRequestFileSystem,c=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},u="application/octet-stream",d=0,f=[],h=function(){for(var t=f.length;t--;){var e=f[t];"string"==typeof e?i.revokeObjectURL(e):e.remove()}f.length=0},p=function(t,e,n){e=[].concat(e);for(var i=e.length;i--;){var r=t["on"+e[i]];if("function"==typeof r)try{r.call(t,n||t)}catch(o){c(o)}}},g=function(e,i){var c,h,g,m=this,v=e.type,y=!1,b=function(){var t=n().createObjectURL(e);return f.push(t),t},w=function(){p(m,"writestart progress write writeend".split(" "))},E=function(){(y||!c)&&(c=b(e)),h?h.location.href=c:window.open(c,"_blank"),m.readyState=m.DONE,w()},x=function(t){return function(){return m.readyState!==m.DONE?t.apply(this,arguments):void 0}},T={create:!0,exclusive:!1};return m.readyState=m.INIT,i||(i="download"),o?(c=b(e),r.href=c,r.download=i,s(r),m.readyState=m.DONE,void w()):(t.chrome&&v&&v!==u&&(g=e.slice||e.webkitSlice,e=g.call(e,0,e.size,u),y=!0),a&&"download"!==i&&(i+=".download"),(v===u||a)&&(h=t),l?(d+=e.size,void l(t.TEMPORARY,d,x(function(t){t.root.getDirectory("saved",T,x(function(t){var n=function(){t.getFile(i,T,x(function(t){t.createWriter(x(function(n){n.onwriteend=function(e){h.location.href=t.toURL(),f.push(t),m.readyState=m.DONE,p(m,"writeend",e)},n.onerror=function(){var t=n.error;t.code!==t.ABORT_ERR&&E()},"writestart progress write abort".split(" ").forEach(function(t){n["on"+t]=m["on"+t]}),n.write(e),m.abort=function(){n.abort(),m.readyState=m.DONE},m.readyState=m.WRITING}),E)}),E)};t.getFile(i,{create:!1},x(function(t){t.remove(),n()}),x(function(t){t.code===t.NOT_FOUND_ERR?n():E()}))}),E)}),E)):void E())},m=g.prototype,v=function(t,e){return new g(t,e)};return m.abort=function(){var t=this;t.readyState=t.DONE,p(t,"abort")},m.readyState=m.INIT=0,m.WRITING=1,m.DONE=2,m.error=m.onwritestart=m.onprogress=m.onwrite=m.onabort=m.onerror=m.onwriteend=null,t.addEventListener("unload",h,!1),v}(self);!function(t){"use strict";function e(){}function n(){this.inputInUse=!1,this.outputInUse=!1;var t=document.createElement("object");t.id="_Jazz"+Math.random()+"ie",t.classid="CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90",this.activeX=t;var e=document.createElement("object");e.id="_Jazz"+Math.random(),e.type="audio/x-jazz",t.appendChild(e),this.objRef=e;var n=document.createElement("p");n.appendChild(document.createTextNode("This page requires the "));var i=document.createElement("a");i.appendChild(document.createTextNode("Jazz plugin")),i.href="http://jazz-soft.net/",n.appendChild(i),n.appendChild(document.createTextNode(".")),e.appendChild(n);var r=document.getElementById("MIDIPlugin");if(!r){var r=document.createElement("div");r.id="MIDIPlugin",r.style.position="absolute",r.style.visibility="hidden",r.style.left="-9999px",r.style.top="-9999px",document.body.appendChild(r)}r.appendChild(t),this._Jazz=this.objRef.isJazz?this.objRef:this.activeX.isJazz?this.activeX:null,this._Jazz&&(this._Jazz._jazzTimeZero=this._Jazz.Time(),this._Jazz._perfTimeZero=window.performance.now())}function i(){this._jazzInstances=new Array,this._jazzInstances.push(new n),this._promise=new e,this._jazzInstances[0]._Jazz?(this._Jazz=this._jazzInstances[0]._Jazz,window.setTimeout(a.bind(this),3)):window.setTimeout(r.bind(this),3)}function r(){this._promise&&this._promise.fail({code:1})}function o(){this.jazz.MidiOutLong(this.data)}var s,i,a,l,c,u;e.prototype.then=function(t,e){this.accept=t,this.reject=e},e.prototype.succeed=function(t){this.accept&&this.accept(t)},e.prototype.fail=function(t){this.reject&&this.reject(t)},s=function(){var t=new i;return t._promise},a=function(){this._promise&&this._promise.succeed(this)},i.prototype.inputs=function(){if(!this._Jazz)return null;for(var t=this._Jazz.MidiInList(),e=new Array(t.length),n=0;n<t.length;n++)e[n]=new l(this,t[n],n);return e},i.prototype.outputs=function(){if(!this._Jazz)return null;for(var t=this._Jazz.MidiOutList(),e=new Array(t.length),n=0;n<t.length;n++)e[n]=new c(this,t[n],n);return e},l=function(t,e,i){this._listeners=[],this._midiAccess=t,this._index=i,this._inLongSysexMessage=!1,this._sysexBuffer=new Uint8Array,this.id=""+i+"."+e,this.manufacturer="",this.name=e,this.type="input",this.version="",this.onmidimessage=null;for(var r=null,o=0;o<t._jazzInstances.length&&!r;o++)t._jazzInstances[o].inputInUse||(r=t._jazzInstances[o]);r||(r=new n,t._jazzInstances.push(r)),r.inputInUse=!0,this._jazzInstance=r._Jazz,this._input=this._jazzInstance.MidiInOpen(this._index,u.bind(this))},l.prototype.addEventListener=function(t,e,n){if("midimessage"===t){for(var i=0;i<this._listeners.length;i++)if(this._listeners[i]==e)return;this._listeners.push(e)}},l.prototype.removeEventListener=function(t,e,n){if("midimessage"===t)for(var i=0;i<this._listeners.length;i++)if(this._listeners[i]==e)return void this._listeners.splice(i,1)},l.prototype.preventDefault=function(){this._pvtDef=!0},l.prototype.dispatchEvent=function(t){this._pvtDef=!1;for(var e=0;e<this._listeners.length;e++)this._listeners[e].handleEvent?this._listeners[e].handleEvent.bind(this)(t):this._listeners[e].bind(this)(t);return this.onmidimessage&&this.onmidimessage(t),this._pvtDef},l.prototype.appendToSysexBuffer=function(t){var e=this._sysexBuffer.length,n=new Uint8Array(e+t.length);n.set(this._sysexBuffer),n.set(t,e),this._sysexBuffer=n},l.prototype.bufferLongSysex=function(t,e){for(var n=e;n<t.length;){if(247==t[n])return n++,this.appendToSysexBuffer(t.slice(e,n)),n;n++}return this.appendToSysexBuffer(t.slice(e,n)),this._inLongSysexMessage=!0,n},u=function(t,e){var n,i=0,r=!1;for(n=0;n<e.length;n+=i){if(this._inLongSysexMessage){if(n=this.bufferLongSysex(e,n),247!=e[n-1])return;r=!0}else switch(r=!1,240&e[n]){case 128:case 144:case 160:case 176:case 224:i=3;break;case 192:case 208:i=2;break;case 240:switch(e[n]){case 240:if(n=this.bufferLongSysex(e,n),247!=e[n-1])return;r=!0;break;case 241:case 243:i=2;break;case 242:i=3;break;default:i=1}}var o=document.createEvent("Event");o.initEvent("midimessage",!1,!1),o.receivedTime=parseFloat(t.toString())+this._jazzInstance._perfTimeZero,r||this._inLongSysexMessage?(o.data=new Uint8Array(this._sysexBuffer),this._sysexBuffer.length=0,this._inLongSysexMessage=!1):o.data=new Uint8Array(e.slice(n,i+n)),this.dispatchEvent(o)}},c=function(t,e,i){this._listeners=[],this._midiAccess=t,this._index=i,this.id=""+i+"."+e,this.manufacturer="",this.name=e,this.type="output",this.version="";for(var r=null,o=0;o<t._jazzInstances.length&&!r;o++)t._jazzInstances[o].outputInUse||(r=t._jazzInstances[o]);r||(r=new n,t._jazzInstances.push(r)),r.outputInUse=!0,this._jazzInstance=r._Jazz,this._jazzInstance.MidiOutOpen(this.name)},c.prototype.send=function(t,e){var n=0;if(0===t.length)return!1;if(e&&(n=Math.floor(e-window.performance.now())),e&&n>1){var i=new Object;i.jazz=this._jazzInstance,i.data=t,window.setTimeout(o.bind(i),n)}else this._jazzInstance.MidiOutLong(t);return!0},window.navigator.requestMIDIAccess||(window.navigator.requestMIDIAccess=s)}(window),function(t){function e(){for(var e=["moz","webkit","o","ms"],n=e.length,i={value:function(t){return function(){return Date.now()-t}}(Date.now())};n>=0;n--)if(e[n]+"Now"in t.performance)return i.value=function(e){return function(){t.performance[e]()}}(e[n]+"Now"),i;return"timing"in t.performance&&"connectStart"in t.performance.timing&&(i.value=function(t){return function(){Date.now()-t}}(t.performance.timing.connectStart)),i}var n,i={};"performance"in t&&"now"in t.performance||("performance"in t||Object.defineProperty(t,"performance",{get:function(){return i}}),n=e(),Object.defineProperty(t.performance,"now",n))}(window);var JSMIDIParser={debug:!1,IO:function(t,e){return window.File&&window.FileReader?void(document.getElementById(t).onchange=function(t){return function(n){if(!n.target.files.length)return!1;var i=new FileReader;i.readAsArrayBuffer(n.target.files[0]),i.onload=function(t){return function(n){e(t.parse(new Uint8Array(n.target.result)))}}(t)}}(this)):(this.debug&&console.log("The File APIs are not fully supported in this browser."),!1)},parse:function(t){var e={data:null,pointer:0,movePointer:function(t){return this.pointer+=t,this.pointer},readInt:function(t){var e=0;if(t>1)for(var n=1;t-1>=n;n++)e+=parseInt(this.data[this.pointer])*Math.pow(256,t-n),this.pointer++;return e+=parseInt(this.data[this.pointer]),this.pointer++,e},readStr:function(t){for(var e="",n=1;t>=n;n++)e+=String.fromCharCode(this.readInt(1));return e},readIntVLV:function(){for(var t=0;;){var e=this.readInt(1);if(!(128&e))return t+e;t+=127&e,t<<=7}}};if(e.data=t,1297377380!=e.readInt(4))return!1;var n=(e.readInt(4),{});n.formatType=e.readInt(2),n.tracks=e.readInt(2),n.track=[];var i=e.readInt(1),r=e.readInt(1);i>=128?(n.timeDivision=[],n.timeDivision[0]=i-128,n.timeDivision[1]=r):n.timeDivision=256*i+r;for(var o=1;o<=n.tracks;o++){if(n.track[o-1]={event:[]},1297379947!=e.readInt(4))return!1;for(var s=(e.readInt(4),0),a=!1,l=null;!a;){s++;var c={};c.deltaTime=e.readIntVLV();var u=e.readInt(1);if(u>=128?l=u:(u=l,e.movePointer(-1)),255==u){c.type=255,c.metaType=e.readInt(1);var d=e.readIntVLV();switch(c.metaType){case 47:a=!0;break;case 0:c.subtype="sequenceNumber",c.data=e.readInt(2),c.number=c.data;break;case 1:c.subtype="text",c.data=e.readStr(d),c.text=c.data;break;case 2:c.subtype="copyrightNotice",c.data=e.readStr(d),c.text=c.data;break;case 3:c.subtype="trackName",c.data=e.readStr(d),c.text=c.data;break;case 4:c.subtype="instrumentName",c.data=e.readStr(d),c.text=c.data;break;case 5:c.subtype="lyrics",c.data=e.readStr(d),c.text=c.data;break;case 6:c.subtype="marker",c.data=e.readStr(d),c.text=c.data;break;case 7:c.subtype="cuePoint",c.data=e.readStr(d),c.text=c.data;break;case 32:if(c.subtype="midiChannelPrefix",1!=d)throw"Expected length for midiChannelPrefix event is 1, got "+d;c.data=e.readInt(1),c.channel=c.data;break;case 33:c.subtype="midiPort",c.data=e.readInt(d);break;case 89:c.subtype="keySignature",c.data=e.readInt(d);break;case 81:c.subtype="setTempo",c.data=[e.readInt(1),e.readInt(1),e.readInt(1)],c.microsecondsPerBeat=(c.data[0]<<16)+(c.data[1]<<8)+c.data[2],c.bpm=6e7/c.microsecondsPerBeat,n.bpm||(n.bpm=c.bpm);break;case 84:c.subtype="smpteOffset",c.data=[e.readInt(1),e.readInt(1),e.readInt(1),e.readInt(1),e.readInt(1)];var f=c.data[0];c.frameRate={0:24,32:25,64:29,96:30}[96&f],c.hour=31&f,c.min=c.data[1],c.sec=c.data[2],c.frame=c.data[3],c.subframe=c.data[4];break;case 88:c.subtype="timeSignature",c.data=[e.readInt(1),e.readInt(1),e.readInt(1),e.readInt(1)],c.numerator=c.data[0],c.denominator=Math.pow(2,c.data[1]),c.metronome=c.data[2],c.thirtyseconds=c.data[3];break;default:e.readInt(d),c.data=e.readInt(d),this.debug&&console.log("Unimplemented 0xFF event! data block readed as Integer")}}else switch(u=u.toString(16).split(""),u[1]||u.unshift("0"),c.type=parseInt(u[0],16),c.channel=parseInt(u[1],16),c.type){case 15:c.subtype="sysEx / dividedSysEx";var h=e.readIntVLV();c.data=e.readInt(h),this.debug&&console.log("Unimplemented 0xF exclusive events! data block readed as Integer");break;case 10:c.subtype="noteAftertouch",c.data=[e.readInt(1),e.readInt(1)],c.noteNumber=c.data[0],c.amount=c.data[1];break;case 11:c.subtype="controller",c.data=[e.readInt(1),e.readInt(1)],c.controllerType=c.data[0],c.value=c.data[1];break;case 14:c.subtype="pitchBend",c.data=[e.readInt(1),e.readInt(1)],c.value=c.data[0]+(c.data[1]<<7);break;case 8:c.subtype="noteOff",c.data=[e.readInt(1),e.readInt(1)],c.noteNumber=c.data[0],c.velocity=c.data[1];break;case 9:c.data=[e.readInt(1),e.readInt(1)],c.noteNumber=c.data[0],c.velocity=c.data[1],c.subtype=c.velocity?"noteOn":"noteOff";break;case 12:c.subtype="programChange",c.data=e.readInt(1),c.programNumber=c.data;break;case 13:c.subtype="channelAftertouch",c.data=e.readInt(1),c.amount=c.data;break;default:return this.debug&&console.log("Unknown EVENT detected.... reading cancelled!"),!1}n.track[o-1].event[s-1]=c}}return n},getStructure:function(t){for(var e=0,n=[],i=[],r={ppq:t.timeDivision,bpm:t.bpm},o=0;o<t.track.length;o++)for(var s=t.track[o],a=0;a<s.event.length;a++){var l=s.event[a];switch(e+=l.deltaTime,l.subtype){case"trackName":e=0;break;case"programChange":i[l.channel]=l.programNumber;break;case"noteOn":n.push({startTime:3*e,note:l.noteNumber,velocity:l.velocity,channel:l.channel,program:i[l.channel]||0});break;case"noteOff":for(var c=0;c<n.length;c++)if(n[c].note==l.noteNumber&&!n[c].endTime){n[c].endTime=3*e,n[c].duration=n[c].endTime-n[c].startTime;break}}}return r.notes=n,r}},CBinParser=function(t){var e=t,n=0;this.getUBYTE=function(){return 255&e.charCodeAt(n++)},this.getUSHORT=function(){var t=255&e.charCodeAt(n)|(255&e.charCodeAt(n+1))<<8;return n+=2,t},this.getULONG=function(){var t=255&e.charCodeAt(n)|(255&e.charCodeAt(n+1))<<8|(255&e.charCodeAt(n+2))<<16|(255&e.charCodeAt(n+3))<<24;return n+=4,t},this.getFLOAT=function(){var t=this.getULONG();if(0==t)return 0;var e=2147483648&t,n=t>>23&255,i=1+(8388607&t)/8388608,r=i*Math.pow(2,n-127);return e?-r:r},this.getTail=function(){var t=e.slice(n);return n=e.length,t}},CBinWriter=function(){var t="";this.putUBYTE=function(e){t+=String.fromCharCode(e)},this.putUSHORT=function(e){t+=String.fromCharCode(255&e,e>>8&255)},this.putULONG=function(e){t+=String.fromCharCode(255&e,e>>8&255,e>>16&255,e>>24&255)},this.putFLOAT=function(t){var e=0;if(0!=t){var n=0;0>t&&(n=2147483648,t=-t);for(var i=150;8388608>t;)t*=2,i--;for(;t>=16777216;)t/=2,i++;e=n|(255&i)<<23|8388607&t}this.putULONG(e)},this.append=function(e){t+=e},this.getData=function(){return t}},CAudioTimer=function(){var t=null,e=0,n=[0,0,0,0,0,0],i=0;this.setAudioElement=function(e){t=e},this.currentTime=function(){if(!t)return 0;var r,o=.001*(new Date).getTime(),s=o-e,a=t.currentTime,l=a-s;if(.01>a||l>.2||-.2>l)for(s=a,e=o-s,r=0;r<n.length;r++)n[r]=0;var c=0;for(r=0;r<n.length;r++)c+=n[r];return c/=n.length,n[i]=l,i=(i+1)%n.length,s+c},this.reset=function(){e=.001*(new Date).getTime();for(var t=0;t<n.length;t++)n[t]=0}},CUtil={getEventElement:function(t){var e=null;return t||(t=window.event),t.target?e=t.target:t.srcElement&&(e=t.srcElement),3==e.nodeType&&(e=e.parentNode),e},getMousePos:function(t,e){var n=[0,0];if(t.pageX&&t.pageY?n=[t.pageX,t.pageY]:t.clientX&&t.clientY?n=[t.clientX+document.body.scrollLeft+document.documentElement.scrollLeft,t.clientY+document.body.scrollTop+document.documentElement.scrollTop]:t.touches&&t.touches.length>0&&(n=[t.touches[0].clientX+document.body.scrollLeft+document.documentElement.scrollLeft,t.touches[0].clientY+document.body.scrollTop+document.documentElement.scrollTop]),!e)return n;var i=this.getElementPos(this.getEventElement(t));return[n[0]-i[0],n[1]-i[1]]},getElementPos:function(t){var e=0,n=0;if(t.offsetParent)do e+=t.offsetLeft,n+=t.offsetTop;while(t=t.offsetParent);return[e,n]},toHex:function(t,e){for(var n=t.toString(16).toUpperCase(),i=e-n.length,r=0;i>r;++r)n="0"+n;return n},getURLBase:function(t){var e=t.indexOf("?");return t.slice(0,e>=0?e:t.length)},parseURLGetData:function(t){var e=t.indexOf("?")+1,n=t.indexOf("#")+1||t.length+1,i=t.slice(e,n-1),r={};if(i===t||""===i)return r;for(var o=i.replace(/\+/g," ").split("&"),s=0;s<o.length;s++){var a=o[s].split("="),l=decodeURIComponent(a[0]),c=decodeURIComponent(a[1]);l in r||(r[l]=[]),r[l].push(2===a.length?c:null)}return r}},CSong={instProps:{OSC1_WAVEFORM:0,OSC1_VOL:1,OSC1_SEMI:2,OSC1_XENV:3,OSC2_WAVEFORM:4,OSC2_VOL:5,OSC2_SEMI:6,OSC2_DETUNE:7,OSC2_XENV:8,NOISE_VOL:9,ENV_ATTACK:10,ENV_SUSTAIN:11,ENV_RELEASE:12,LFO_WAVEFORM:13,LFO_AMT:14,LFO_FREQ:15,LFO_FX_FREQ:16,FX_FILTER:17,FX_FREQ:18,FX_RESONANCE:19,FX_DIST:20,FX_DRIVE:21,FX_PAN_AMT:22,FX_PAN_FREQ:23,FX_DELAY_AMT:24,FX_DELAY_TIME:25},compression:{NONE:0,RLE:1,DEFLATE:2},MAX_SONG_ROWS:128,MAX_PATTERNS:36,MAX_INSTRUMENTS:8,MAX_CHORD:4,SIGNATURE:2020557395,makeURLSongData:function(t,e){for(var n=btoa(e),i="",r=0;r<n.length;++r){var o=n[r];"+"===o&&(o="-"),"/"===o&&(o="_"),"="===o&&(o=""),i+=o}return t+"?data="+i},calcSamplesPerRow:function(t){return Math.round(661500/t)},songToJS:function(t){var e,n,i,r,o="";for(o+="    // This music has been exported by SoundBox. You can use it with\n",o+="    // http://sb.bitsnbites.eu/player-small.js in your own product.\n\n",o+="    // See http://sb.bitsnbites.eu/demo.html for an example of how to\n",o+="    // use it in a demo.\n\n",o+="    // Song data\n",o+="    var song = {\n",o+="      songData: [\n",e=0;8>e;e++){var s=t.songData[e];o+="        { // Instrument "+e+"\n",o+="          i: [\n",o+="          "+s.i[this.instProps.OSC1_WAVEFORM]+", // OSC1_WAVEFORM\n",o+="          "+s.i[this.instProps.OSC1_VOL]+", // OSC1_VOL\n",o+="          "+s.i[this.instProps.OSC1_SEMI]+", // OSC1_SEMI\n",o+="          "+s.i[this.instProps.OSC1_XENV]+", // OSC1_XENV\n",o+="          "+s.i[this.instProps.OSC2_WAVEFORM]+", // OSC2_WAVEFORM\n",o+="          "+s.i[this.instProps.OSC2_VOL]+", // OSC2_VOL\n",o+="          "+s.i[this.instProps.OSC2_SEMI]+", // OSC2_SEMI\n",o+="          "+s.i[this.instProps.OSC2_DETUNE]+", // OSC2_DETUNE\n",o+="          "+s.i[this.instProps.OSC2_XENV]+", // OSC2_XENV\n",o+="          "+s.i[this.instProps.NOISE_VOL]+", // NOISE_VOL\n",o+="          "+s.i[this.instProps.ENV_ATTACK]+", // ENV_ATTACK\n",o+="          "+s.i[this.instProps.ENV_SUSTAIN]+", // ENV_SUSTAIN\n",o+="          "+s.i[this.instProps.ENV_RELEASE]+", // ENV_RELEASE\n",o+="          "+s.i[this.instProps.LFO_WAVEFORM]+", // LFO_WAVEFORM\n",o+="          "+s.i[this.instProps.LFO_AMT]+", // LFO_AMT\n",o+="          "+s.i[this.instProps.LFO_FREQ]+", // LFO_FREQ\n",o+="          "+s.i[this.instProps.LFO_FX_FREQ]+", // LFO_FX_FREQ\n",o+="          "+s.i[this.instProps.FX_FILTER]+", // FX_FILTER\n",o+="          "+s.i[this.instProps.FX_FREQ]+", // FX_FREQ\n",o+="          "+s.i[this.instProps.FX_RESONANCE]+", // FX_RESONANCE\n",o+="          "+s.i[this.instProps.FX_DIST]+", // FX_DIST\n",o+="          "+s.i[this.instProps.FX_DRIVE]+", // FX_DRIVE\n",o+="          "+s.i[this.instProps.FX_PAN_AMT]+", // FX_PAN_AMT\n",o+="          "+s.i[this.instProps.FX_PAN_FREQ]+", // FX_PAN_FREQ\n",o+="          "+s.i[this.instProps.FX_DELAY_AMT]+", // FX_DELAY_AMT\n",o+="          "+s.i[this.instProps.FX_DELAY_TIME]+" // FX_DELAY_TIME\n",o+="          ],\n",o+="          // Patterns\n",o+="          p: [";var a=t.endPattern-2,l=0,c=0;for(n=0;a>=n;n++)r=s.p[n],r>l&&(l=r),r&&(c=n);for(n=0;c>=n;n++)r=s.p[n],r&&(o+=r),c>n&&(o+=",");for(o+="],\n",o+="          // Columns\n",o+="          c: [\n",n=0;l>n;n++){for(o+="            {n: [",c=0,i=0;i<4*t.patternLen;i++)s.c[n].n[i]&&(c=i);for(i=0;c>=i;i++){var u=s.c[n].n[i];u&&(o+=u),c>i&&(o+=",")}for(o+="],\n",o+="             f: [",c=0,i=0;i<2*t.patternLen;i++)s.c[n].f[i]&&(c=i);for(i=0;c>=i;i++){var d=s.c[n].f[i];d&&(o+=d),c>i&&(o+=",")}o+="]}",l-1>n&&(o+=","),o+="\n"}o+="          ]\n",o+="        }",7>e&&(o+=","),o+="\n"}return o+="      ],\n",o+="      rowLen: "+t.rowLen+",   // In sample lengths\n",o+="      patternLen: "+t.patternLen+",  // Rows per pattern\n",o+="      endPattern: "+t.endPattern+"  // End pattern\n",o+="    };\n"},songToBin:function(t){var e=new CBinWriter;e.putULONG(t.rowLen),e.putUBYTE(t.endPattern-2),e.putUBYTE(t.patternLen);var n,i,r,o,s;for(n=0;8>n;n++){for(o=t.songData[n],e.putUBYTE(o.i[this.instProps.OSC1_WAVEFORM]),e.putUBYTE(o.i[this.instProps.OSC1_VOL]),e.putUBYTE(o.i[this.instProps.OSC1_SEMI]),e.putUBYTE(o.i[this.instProps.OSC1_XENV]),e.putUBYTE(o.i[this.instProps.OSC2_WAVEFORM]),e.putUBYTE(o.i[this.instProps.OSC2_VOL]),e.putUBYTE(o.i[this.instProps.OSC2_SEMI]),e.putUBYTE(o.i[this.instProps.OSC2_DETUNE]),e.putUBYTE(o.i[this.instProps.OSC2_XENV]),e.putUBYTE(o.i[this.instProps.NOISE_VOL]),e.putUBYTE(o.i[this.instProps.ENV_ATTACK]),e.putUBYTE(o.i[this.instProps.ENV_SUSTAIN]),e.putUBYTE(o.i[this.instProps.ENV_RELEASE]),e.putUBYTE(o.i[this.instProps.LFO_WAVEFORM]),e.putUBYTE(o.i[this.instProps.LFO_AMT]),e.putUBYTE(o.i[this.instProps.LFO_FREQ]),e.putUBYTE(o.i[this.instProps.LFO_FX_FREQ]),e.putUBYTE(o.i[this.instProps.FX_FILTER]),e.putUBYTE(o.i[this.instProps.FX_FREQ]),e.putUBYTE(o.i[this.instProps.FX_RESONANCE]),e.putUBYTE(o.i[this.instProps.FX_DIST]),e.putUBYTE(o.i[this.instProps.FX_DRIVE]),e.putUBYTE(o.i[this.instProps.FX_PAN_AMT]),e.putUBYTE(o.i[this.instProps.FX_PAN_FREQ]),e.putUBYTE(o.i[this.instProps.FX_DELAY_AMT]),e.putUBYTE(o.i[this.instProps.FX_DELAY_TIME]),i=0;i<this.MAX_SONG_ROWS;i++)e.putUBYTE(o.p[i]);for(i=0;i<this.MAX_PATTERNS;i++){for(s=o.c[i],r=0;r<4*t.patternLen;r++)e.putUBYTE(s.n[r]);for(r=0;r<2*t.patternLen;r++)e.putUBYTE(s.f[r])}}var a,l,c=e.getData(),u=this.compression.NONE;for(n=9;n>0;n--)if(a=RawDeflate.deflate(c,n),l=RawDeflate.inflate(a),c===l){u=this.compression.DEFLATE;break}return u==this.compression.NONE&&(a=rle_encode(e.getData()),l=rle_decode(a),c===l?u=this.compression.RLE:a=c),e=new CBinWriter,e.putULONG(this.SIGNATURE),e.putUBYTE(10),e.putUBYTE(u),e.append(a),e.getData()},binToSong:function(t){var e=this.soundboxBinToSong(t);return e||(e=this.sonantBinToSong(t)),e?e:void alert("Song format not recognized.")},sonantBinToSong:function(t){if(3333!=t.length)return void 0;if((255&t.charCodeAt(3332))>48)return void 0;var e=new CBinParser(t),n={};n.rowLen=e.getULONG(),n.patternLen=32,n.songData=[];var i,r,o,s,a,l;for(i=0;8>i;i++){for(s={},s.i=[],s.i[this.instProps.OSC1_SEMI]=12*(e.getUBYTE()-8)+128,s.i[this.instProps.OSC1_SEMI]+=e.getUBYTE(),e.getUBYTE(),s.i[this.instProps.OSC1_XENV]=e.getUBYTE(),s.i[this.instProps.OSC1_VOL]=e.getUBYTE(),s.i[this.instProps.OSC1_WAVEFORM]=e.getUBYTE(),s.i[this.instProps.OSC2_SEMI]=12*(e.getUBYTE()-8)+128,s.i[this.instProps.OSC2_SEMI]+=e.getUBYTE(),s.i[this.instProps.OSC2_DETUNE]=e.getUBYTE(),s.i[this.instProps.OSC2_XENV]=e.getUBYTE(),s.i[this.instProps.OSC2_VOL]=e.getUBYTE(),s.i[this.instProps.OSC2_WAVEFORM]=e.getUBYTE(),s.i[this.instProps.NOISE_VOL]=e.getUBYTE(),e.getUBYTE(),e.getUBYTE(),e.getUBYTE(),s.i[this.instProps.ENV_ATTACK]=Math.round(Math.sqrt(e.getULONG())/2),s.i[this.instProps.ENV_SUSTAIN]=Math.round(Math.sqrt(e.getULONG())/2),s.i[this.instProps.ENV_RELEASE]=Math.round(Math.sqrt(e.getULONG())/2),l=e.getUBYTE(),s.i[this.instProps.FX_FILTER]=e.getUBYTE(),e.getUBYTE(),e.getUBYTE(),s.i[this.instProps.FX_FREQ]=Math.round(e.getFLOAT()/43.23529),s.i[this.instProps.FX_RESONANCE]=255-e.getUBYTE(),s.i[this.instProps.FX_DELAY_TIME]=e.getUBYTE(),s.i[this.instProps.FX_DELAY_AMT]=e.getUBYTE(),s.i[this.instProps.FX_PAN_FREQ]=e.getUBYTE(),s.i[this.instProps.FX_PAN_AMT]=e.getUBYTE(),s.i[this.instProps.FX_DIST]=0,s.i[this.instProps.FX_DRIVE]=32,e.getUBYTE(),s.i[this.instProps.LFO_FX_FREQ]=e.getUBYTE(),s.i[this.instProps.LFO_FREQ]=e.getUBYTE(),s.i[this.instProps.LFO_AMT]=e.getUBYTE(),s.i[this.instProps.LFO_WAVEFORM]=e.getUBYTE(),s.p=[],r=0;48>r;r++)s.p[r]=e.getUBYTE();for(r=48;r<this.MAX_SONG_ROWS;r++)s.p[r]=0;for(s.c=[],r=0;10>r;r++){for(a={},a.n=[],o=0;32>o;o++)a.n[o]=e.getUBYTE(),a.n[o+32]=0,a.n[o+64]=0,a.n[o+96]=0;for(a.f=[],o=0;64>o;o++)a.f[o]=0;s.c[r]=a}for(r=10;r<this.MAX_PATTERNS;r++){for(a={},a.n=[],o=0;128>o;o++)a.n[o]=0;for(a.f=[],o=0;64>o;o++)a.f[o]=0;s.c[r]=a}e.getUBYTE(),e.getUBYTE(),(s.i[this.instProps.FX_FILTER]<1||s.i[this.instProps.FX_FILTER]>3)&&(s.i[this.instProps.FX_FILTER]=2,s.i[this.instProps.FX_FREQ]=255),s.i[this.instProps.OSC1_VOL]*=l/255,s.i[this.instProps.OSC2_VOL]*=l/255,s.i[this.instProps.NOISE_VOL]*=l/255,2==s.i[this.instProps.OSC1_WAVEFORM]&&(s.i[this.instProps.OSC1_VOL]/=2),2==s.i[this.instProps.OSC2_WAVEFORM]&&(s.i[this.instProps.OSC2_VOL]/=2),2==s.i[this.instProps.LFO_WAVEFORM]&&(s.i[this.instProps.LFO_AMT]/=2),s.i[this.instProps.OSC1_VOL]=Math.round(s.i[this.instProps.OSC1_VOL]),s.i[this.instProps.OSC2_VOL]=Math.round(s.i[this.instProps.OSC2_VOL]),s.i[this.instProps.NOISE_VOL]=Math.round(s.i[this.instProps.NOISE_VOL]),s.i[this.instProps.LFO_AMT]=Math.round(s.i[this.instProps.LFO_AMT]),n.songData[i]=s}return n.endPattern=e.getUBYTE()+2,n},soundboxBinToSong:function(t){var e=new CBinParser(t),n={},i=e.getULONG(),r=e.getUBYTE();if(i!=this.SIGNATURE||1>r||r>10)return void 0;if(r>=8){var o,s=e.getUBYTE(),a=e.getTail();switch(s){default:case this.compression.NONE:o=a;break;case this.compression.RLE:o=rle_decode(a);break;case this.compression.DEFLATE:o=RawDeflate.inflate(a)}e=new CBinParser(o)}n.rowLen=e.getULONG(),n.endPattern=e.getUBYTE()+2,n.patternLen=r>=10?e.getUBYTE():32,n.songData=[];var l,c,u,d,f;for(l=0;8>l;l++){d={},d.i=[],6>r?(d.i[this.instProps.OSC1_SEMI]=e.getUBYTE(),d.i[this.instProps.OSC1_XENV]=e.getUBYTE(),d.i[this.instProps.OSC1_VOL]=e.getUBYTE(),d.i[this.instProps.OSC1_WAVEFORM]=e.getUBYTE()):(d.i[this.instProps.OSC1_WAVEFORM]=e.getUBYTE(),d.i[this.instProps.OSC1_VOL]=e.getUBYTE(),d.i[this.instProps.OSC1_SEMI]=e.getUBYTE(),d.i[this.instProps.OSC1_XENV]=e.getUBYTE()),6>r?(d.i[this.instProps.OSC2_SEMI]=e.getUBYTE(),d.i[this.instProps.OSC2_DETUNE]=e.getUBYTE(),d.i[this.instProps.OSC2_XENV]=e.getUBYTE(),d.i[this.instProps.OSC2_VOL]=e.getUBYTE(),d.i[this.instProps.OSC2_WAVEFORM]=e.getUBYTE()):(d.i[this.instProps.OSC2_WAVEFORM]=e.getUBYTE(),d.i[this.instProps.OSC2_VOL]=e.getUBYTE(),d.i[this.instProps.OSC2_SEMI]=e.getUBYTE(),d.i[this.instProps.OSC2_DETUNE]=e.getUBYTE(),d.i[this.instProps.OSC2_XENV]=e.getUBYTE()),d.i[this.instProps.NOISE_VOL]=e.getUBYTE(),5>r?(d.i[this.instProps.ENV_ATTACK]=Math.round(Math.sqrt(e.getULONG())/2),d.i[this.instProps.ENV_SUSTAIN]=Math.round(Math.sqrt(e.getULONG())/2),d.i[this.instProps.ENV_RELEASE]=Math.round(Math.sqrt(e.getULONG())/2)):(d.i[this.instProps.ENV_ATTACK]=e.getUBYTE(),d.i[this.instProps.ENV_SUSTAIN]=e.getUBYTE(),d.i[this.instProps.ENV_RELEASE]=e.getUBYTE()),6>r?(d.i[this.instProps.FX_FILTER]=e.getUBYTE(),d.i[this.instProps.FX_FREQ]=5>r?Math.round(e.getUSHORT()/43.23529):e.getUBYTE(),d.i[this.instProps.FX_RESONANCE]=e.getUBYTE(),d.i[this.instProps.FX_DELAY_TIME]=e.getUBYTE(),d.i[this.instProps.FX_DELAY_AMT]=e.getUBYTE(),d.i[this.instProps.FX_PAN_FREQ]=e.getUBYTE(),d.i[this.instProps.FX_PAN_AMT]=e.getUBYTE(),d.i[this.instProps.FX_DIST]=e.getUBYTE(),d.i[this.instProps.FX_DRIVE]=e.getUBYTE(),d.i[this.instProps.LFO_FX_FREQ]=e.getUBYTE(),d.i[this.instProps.LFO_FREQ]=e.getUBYTE(),d.i[this.instProps.LFO_AMT]=e.getUBYTE(),d.i[this.instProps.LFO_WAVEFORM]=e.getUBYTE()):(d.i[this.instProps.LFO_WAVEFORM]=e.getUBYTE(),d.i[this.instProps.LFO_AMT]=e.getUBYTE(),d.i[this.instProps.LFO_FREQ]=e.getUBYTE(),d.i[this.instProps.LFO_FX_FREQ]=e.getUBYTE(),d.i[this.instProps.FX_FILTER]=e.getUBYTE(),d.i[this.instProps.FX_FREQ]=e.getUBYTE(),d.i[this.instProps.FX_RESONANCE]=e.getUBYTE(),
d.i[this.instProps.FX_DIST]=e.getUBYTE(),d.i[this.instProps.FX_DRIVE]=e.getUBYTE(),d.i[this.instProps.FX_PAN_AMT]=e.getUBYTE(),d.i[this.instProps.FX_PAN_FREQ]=e.getUBYTE(),d.i[this.instProps.FX_DELAY_AMT]=e.getUBYTE(),d.i[this.instProps.FX_DELAY_TIME]=e.getUBYTE());var h=9>r?48:this.MAX_SONG_ROWS;for(d.p=[],c=0;h>c;c++)d.p[c]=e.getUBYTE();for(c=h;c<this.MAX_SONG_ROWS;c++)d.p[c]=0;var p=9>r?10:this.MAX_PATTERNS;for(d.c=[],c=0;p>c;c++){if(f={},f.n=[],1==r)for(u=0;u<n.patternLen;u++)f.n[u]=e.getUBYTE(),f.n[u+n.patternLen]=0,f.n[u+2*n.patternLen]=0,f.n[u+3*n.patternLen]=0;else for(u=0;u<4*n.patternLen;u++)f.n[u]=e.getUBYTE();if(f.f=[],4>r)for(u=0;u<2*n.patternLen;u++)f.f[u]=0;else for(u=0;u<2*n.patternLen;u++)f.f[u]=e.getUBYTE();d.c[c]=f}for(c=p;c<this.MAX_PATTERNS;c++){for(f={},f.n=[],u=0;u<4*n.patternLen;u++)f.n[u]=0;for(f.f=[],u=0;u<2*n.patternLen;u++)f.f[u]=0;d.c[c]=f}3>r&&(2==d.i[this.instProps.OSC1_WAVEFORM]&&(d.i[this.instProps.OSC1_VOL]=Math.round(d.i[this.instProps.OSC1_VOL]/2)),2==d.i[this.instProps.OSC2_WAVEFORM]&&(d.i[this.instProps.OSC2_VOL]=Math.round(d.i[this.instProps.OSC2_VOL]/2)),2==d.i[this.instProps.LFO_WAVEFORM]&&(d.i[this.instProps.LFO_AMT]=Math.round(d.i[this.instProps.LFO_AMT]/2)),d.i[this.instProps.FX_DRIVE]=d.i[this.instProps.FX_DRIVE]<224?d.i[this.instProps.FX_DRIVE]+32:255),7>r&&(d.i[this.instProps.FX_RESONANCE]=255-d.i[this.instProps.FX_RESONANCE]),n.songData[l]=d}return n},getNotePosition:function(t,e,n){var i=Math.floor(t/n/e),r=t/n-e*i;return{pattern:i,row:r}},midiToSong:function(t,e){console.log(t),e=e||72;var n={};n.rowLen=5513,n.endPattern=this.MAX_PATTERNS-1,n.patternLen=32,n.songData=[];for(var i=0;i<t.notes.length;i++){var r=t.notes[i],o=r.channel;if(!(o>this.MAX_INSTRUMENTS-1)){var s=this.getNotePosition(r.startTime,n.patternLen,e);if(!(s.pattern>this.MAX_PATTERNS-1)){if(!n.songData[o])for(var a=0;a<this.MAX_INSTRUMENTS;++a)n.songData[a]={c:[],i:[2,100,128,0,3,201,128,0,0,0,0,6,29,0,194,4,1,3,25,191,115,244,147,6,84,6],p:new Array(this.MAX_SONG_ROWS)};n.songData[o].c[s.pattern]||(n.songData[o].c[s.pattern]={f:[],n:new Array(n.patternLen*this.MAX_CHORD)}),n.songData[o].c[s.pattern].n[s.row]=r.note+87,n.songData[o].p[s.pattern]=s.pattern+1}}}return console.log(n),n},getURLSongData:function(t){var e;if(t){var n=t,i="";if(0==n.indexOf("data:")){var r=n.indexOf("base64,");r>0&&(i=n.substr(r+7))}else for(var o=0;o<n.length;++o){var s=n[o];"-"===s&&(s="+"),"_"===s&&(s="/"),i+=s}try{e=atob(i)}catch(a){console.error("Decode error")}}return e}},CGUI=function(){function t(){Et()}var e,n,i,r,o,s,a=0,l=1,c=2,u=3,d=128,f=36,h=c,p=5,g=0,m=0,v=0,y=0,b=0,w=0,E=0,x=0,T=0,C=0,S=!1,_=!1,I=!1,D=[],O=[],A=[],L=[],N={},P=null,k=new CAudioTimer,R=new CPlayer,B=new CJammer,F=["C-","C#","D-","D#","E-","F-","F#","G-","G#","A-","A#","B-"],M=[26,1,63,3,116,6,150,8,184,10,238,13,274,15,327,18,362,20,394,22],U=function(){return Math.round(661500/N.rowLen)},j=function(){var t,e,n,i,r,o={};o.rowLen=CSong.calcSamplesPerRow(120),o.endPattern=2,o.patternLen=32;var s;for(t=0;t<gInstrumentPresets.length;++t)if(gInstrumentPresets[t].i){s=gInstrumentPresets[t];break}for(o.songData=[],t=0;8>t;t++){for(i={},i.i=[],e=0;e<=s.i.length;++e)i.i[e]=s.i[e];for(i.p=[],e=0;d>e;e++)i.p[e]=0;for(i.c=[],e=0;f>e;e++){for(r={},r.n=[],n=0;n<4*o.patternLen;n++)r.n[n]=0;for(r.f=[],n=0;n<2*o.patternLen;n++)r.f[n]=0;i.c[e]=r}o.songData[t]=i}return o.songData[0].p[0]=1,o},X=function(t){var e=t.data[0]>>4,n=15&t.data[0],i=t.data[1],r=t.data[2];9!=n&&9==e&&r>0&&st(i-12)},V=function(t){o=r.inputs()[i.selectedIndex],o.onmidimessage=X},Y=function(t){r=t;var e,n="function"==typeof r.inputs?r.inputs():[],s=0;for(e=0;e<n.length;e++){var a=n[e].name.toString().toLowerCase();if(-1!=a.indexOf("keyboard")){s=e;break}}if(i.options.length=0,n.length){for(e=0;e<n.length;e++)i.options[e]=new Option(n[e].name,n[e].fingerprint,e==s,e==s);o=n[s],o.onmidimessage=X,i.onchange=V,i.style.display="inline"}},H=function(t){console.error(t)},q=function(){navigator.requestMIDIAccess&&(i=document.getElementById("midiInput"),navigator.requestMIDIAccess().then(Y,H))},W=function(){for(var t,e,n=document.getElementById("instrPreset"),i=0;i<gInstrumentPresets.length;++i)e=gInstrumentPresets[i],t=document.createElement("option"),t.value=e.i?""+i:"",t.appendChild(document.createTextNode(e.name)),n.appendChild(t)},z=function(){document.getElementById("instrPreset").blur()},Q=function(t){t!==h&&(h=t,document.getElementById("sequencer").className=h==l?"edit":"",document.getElementById("pattern").className=h==c?"edit":"",document.getElementById("fxtrack").className=h==u?"edit":"",h!=a&&(z(),ft(),pt()))},G=function(){document.getElementById("bpm").value=U(),document.getElementById("rpp").value=N.patternLen},J=function(t,e){for(var n,i=0;d>i;++i)for(var r=0;8>r;++r){if(n=document.getElementById("sc"+r+"r"+i),!e){var o=N.songData[r].p[i];n.innerHTML=o>0?""+(10>=o?o-1:String.fromCharCode(64+o-10)):""}n.className=i>=w&&x>=i&&r>=b&&E>=r?"selected":""}if(t&&(n=document.getElementById("spr"+w),n.scrollIntoView)){var s=document.getElementById("sequencer"),a=n.offsetTop-s.scrollTop;(0>a||a+10>s.offsetHeight)&&n.scrollIntoView(0>a)}},K=function(t,e){Ue();for(var n,i=b==E&&w==x,r=i?N.songData[b].p[w]-1:-1,o=0;o<N.patternLen;++o)for(var s=0;4>s;++s){if(n=document.getElementById("pc"+s+"r"+o),!e){var a="";if(r>=0){var l=N.songData[b].c[r].n[o+s*N.patternLen]-87;l>0&&(a=F[l%12]+Math.floor(l/12))}n.innerHTML!=a&&(n.innerHTML=a)}n.className=o>=m&&y>=o&&s>=g&&v>=s?"selected":""}if(t&i&&(n=document.getElementById("pc0r"+m),n.scrollIntoView)){var c=document.getElementById("pattern"),u=n.offsetTop-c.scrollTop;(0>u||u+10>c.offsetHeight)&&n.scrollIntoView(0>u)}},Z=function(t,e){je();for(var n,i=b==E&&w==x,r=i?N.songData[b].p[w]-1:-1,o=0;o<N.patternLen;++o){if(n=document.getElementById("fxr"+o),!e){var s=":";if(r>=0){var a=N.songData[b].c[r].f[o];if(a){var l=N.songData[b].c[r].f[o+N.patternLen];s=CUtil.toHex(a,2)+":"+CUtil.toHex(l,2)}}n.innerHTML!=s&&(n.innerHTML=s)}n.className=o>=T&&C>=o?"selected":""}if(t&i&&(n=document.getElementById("fxr"+T),n.scrollIntoView)){var c=document.getElementById("fxtrack"),u=n.offsetTop-c.scrollTop;(0>u||u+10>c.offsetHeight)&&n.scrollIntoView(0>u)}},tt=function(t,e){g=t,m=e,v=t,y=e;for(var n=0;n<N.patternLen;++n)for(var i=0;4>i;++i){var r=document.getElementById("pc"+i+"r"+n);r.className=n==e&&i==t?"selected":""}K(!0,!0)},et=function(t,e){v=t>=g?t:g,y=e>=m?e:m;for(var n=0;n<N.patternLen;++n)for(var i=0;4>i;++i){var r=document.getElementById("pc"+i+"r"+n);r.className=n>=m&&y>=n&&i>=g&&v>=i?"selected":""}K(!1,!0)},nt=function(t,e){b=t,w=e,E=t,x=e,J(!0,!0)},it=function(t,e){E=t>=b?t:b,x=e>=w?e:w,J(!1,!0)},rt=function(t){T=t,C=t;for(var e=0;e<N.patternLen;++e){var n=document.getElementById("fxr"+e);n.className=e>=T&&C>=e?"selected":""}Z(!0,!0)},ot=function(t){C=t>=T?t:T;for(var e=0;e<N.patternLen;++e){var n=document.getElementById("fxr"+e);n.className=e>=T&&C>=e?"selected":""}Z(!1,!0)},st=function(t){var e=t+87;if(B.addNote(e),h==c&&b==E&&w==x&&g==v&&m==y){var n=N.songData[b].p[w]-1;if(n>=0)return N.songData[b].c[n].n[m+g*N.patternLen]=e,tt(g,(m+1)%N.patternLen),K(),!0}return!1},at=function(t,e,n){if(!n){var i=$(t);i.rsSlider("value",e)}},lt=function(t,e){$(t).prop("checked",!!e)},ct=function(){var t=document.getElementById("instrPreset");t.selectedIndex=0},ut=function(t,e){$("[name='"+t+"'][value='"+e+"']").attr("checked","checked").parent().addClass("active").siblings().removeClass("active")},dt=function(t){var e=N.songData[b];ut("osc1_wave",e.i[CSong.instProps.OSC1_WAVEFORM]),at(document.getElementById("osc1_vol"),e.i[CSong.instProps.OSC1_VOL]),at(document.getElementById("osc1_semi"),e.i[CSong.instProps.OSC1_SEMI]),lt(document.getElementById("osc1_xenv"),e.i[CSong.instProps.OSC1_XENV]),ut("osc2_wave",e.i[CSong.instProps.OSC2_WAVEFORM]),at(document.getElementById("osc2_vol"),e.i[CSong.instProps.OSC2_VOL]),at(document.getElementById("osc2_semi"),e.i[CSong.instProps.OSC2_SEMI]),at(document.getElementById("osc2_det"),e.i[CSong.instProps.OSC2_DETUNE]),lt(document.getElementById("osc2_xenv"),e.i[CSong.instProps.OSC2_XENV]),at(document.getElementById("noise_vol"),e.i[CSong.instProps.NOISE_VOL]),at(document.getElementById("env_att"),e.i[CSong.instProps.ENV_ATTACK]),at(document.getElementById("env_sust"),e.i[CSong.instProps.ENV_SUSTAIN]),at(document.getElementById("env_rel"),e.i[CSong.instProps.ENV_RELEASE]),ut("lfo_wave",e.i[CSong.instProps.LFO_WAVEFORM]),at(document.getElementById("lfo_amt"),e.i[CSong.instProps.LFO_AMT]),at(document.getElementById("lfo_freq"),e.i[CSong.instProps.LFO_FREQ]),lt(document.getElementById("lfo_fxfreq"),e.i[CSong.instProps.LFO_FX_FREQ]),ut("fx_filt",e.i[CSong.instProps.FX_FILTER]),at(document.getElementById("fx_freq"),e.i[CSong.instProps.FX_FREQ]),at(document.getElementById("fx_res"),e.i[CSong.instProps.FX_RESONANCE]),at(document.getElementById("fx_dly_amt"),e.i[CSong.instProps.FX_DELAY_AMT]),at(document.getElementById("fx_dly_time"),e.i[CSong.instProps.FX_DELAY_TIME]),at(document.getElementById("fx_pan_amt"),e.i[CSong.instProps.FX_PAN_AMT]),at(document.getElementById("fx_pan_freq"),e.i[CSong.instProps.FX_PAN_FREQ]),at(document.getElementById("fx_dist"),e.i[CSong.instProps.FX_DIST]),at(document.getElementById("fx_drive"),e.i[CSong.instProps.FX_DRIVE]),t&&ct(),B.updateInstr(e.i)},ft=function(){var t=parseInt($("#bpm").val());t&&t>=10&&1e3>=t&&(N.rowLen=CSong.calcSamplesPerRow(t),B.updateRowLen(N.rowLen))},ht=function(t){if(N.patternLen!==t){Nt();var e,n,i,r,o,s;for(e=0;8>e;e++)for(n=0;f>n;n++){for(r=N.songData[e].c[n],o=[],s=[],i=0;4*t>i;i++)o[i]=0;for(i=0;2*t>i;i++)s[i]=0;for(i=0;i<Math.min(N.patternLen,t);i++)o[i]=r.n[i],o[i+t]=r.n[i+N.patternLen],o[i+2*t]=r.n[i+2*N.patternLen],o[i+3*t]=r.n[i+3*N.patternLen],s[i]=r.f[i],s[i+t]=r.f[i+N.patternLen];r.n=o,r.f=s}N.patternLen=t}},pt=function(){var t=parseInt(document.getElementById("rpp").value);t&&t>=1&&256>=t&&(ht(t),Ue(),je(),K(),Z())},gt=function(){var t,e,n;for(N.endPattern=d+1,t=d-1;t>=0;--t){for(n=!0,e=0;8>e;++e)if(N.songData[e].p[t]>0){n=!1;break}if(!n)break;N.endPattern--}ft()},mt=function(t){var e=$("#modal-progress"),n=$("#modal-progressLabel"),i=$("#progressBar");n.text(t),i.css("width","0%"),e.modal()},vt=function(t){var e=CSong.binToSong(t);e&&(Nt(),N=e,G(),J(),K(),Z(),dt(!0))},yt=function(){var t=$("#modal-open"),e=t.find(".modal-body"),n=e.find("form").get(0);n.innerHTML="";for(var i=document.createElement("div"),r=0;r<gDemoSongs.length;r++){var o=$("<div />",{"class":"radio"}),s=$("<label />");s.append($("<input/>",{type:"radio",name:"radiogroup1",value:gDemoSongs[r].name,checked:0===r})).append($("<span/>",{html:gDemoSongs[r].description})),o.append(s),i.appendChild(o.get(0))}o=$("<div />",{"class":"radio"}),s=$("<label />"),s.append($("<input/>",{type:"radio",name:"radiogroup1",value:"custom",id:"open-custom-radio"})).append($("<span/>",{html:"Data URL:"})),o.append(s),i.appendChild(o.get(0));var a=document.createElement("input");a.type="text",a.className="form-control input-sm",a.id="open-data-url",a.title="Paste a saved song data URL here",a.placeholder=a.title,a.onchange=function(){$("#open-custom-radio").prop("checked",!0)},a.onkeydown=a.onchange,a.onclick=a.onchange,a.onpaste=a.onchange,i.appendChild(a),n.appendChild(i),t.modal()},bt=function(t){t.preventDefault();var e=null,n=$("#modal-open"),i=n.find(":radio:checked");if(i&&i.length){if("custom"==i.val()){var r=CUtil.parseURLGetData($("#open-data-url").val());e=CSong.getURLSongData(r&&r.data&&r.data[0])}else for(var o=i.val(),s=0;s<gDemoSongs.length;s++)if(gDemoSongs[s].name===o){e=gDemoSongs[s].data?gDemoSongs[s].data:CSong.getURLSongData(gDemoSongs[s].base64);break}e&&vt(e),n.modal("hide")}},wt=function(t){t.preventDefault(),$(this).button("loading");var e=CSong.midiToSong(s);e&&(Nt(),N=e,G(),J(),K(),Z(),dt(!0)),$("#modal-open-midi").modal("hide")},Et=function(){var t=$("#modal-open-midi"),e=$("#open-midi-button");e.button("loading"),JSMIDIParser.IO("open-midi-file",function(t){s=JSMIDIParser.getStructure(t),e.button("reset")}),e.on("click",wt),t.modal()},xt=function(){var t=$("#modal-save"),n=$("#save-song-data"),i=$("#save-song-button"),r=CSong.makeURLSongData(e,CSong.songToBin(N)),o=r.length<70?r:r.slice(0,67)+"...";n.attr("title",r),n.attr("href",r),n.text(o),i.on("click",function(e){e.preventDefault();var n="data:application/octet-stream;base64,"+btoa(CSong.songToBin(N));window.open(n),t.modal("hide")}),t.modal()},Tt=function(){$("#modal-about").modal()},Ct=function(t){t.preventDefault(),Tt()},St=function(t){return N=j(),G(),J(),K(),Z(),dt(),Q(c),tt(0,0),nt(0,0),rt(0),!1},_t=function(t){t.preventDefault(),yt()},It=function(t){gt(),xt(),t.preventDefault()},Dt=function(t){t.preventDefault(),gt();var e=function(t){var e=new Blob([t],{type:"application/octet-stream"});saveAs(e,"rendered.wav")};Lt(e)},Ot=function(t){gt();var e="data:text/javascript;base64,"+btoa(CSong.songToJS(N));return window.open(e),!1},At=function(t){document.getElementById("statusText").innerHTML=t},Lt=function(t,e){mt("Generating sound...");var n=new Date;R=new CPlayer,R.generate(N,e,function(e){var i=document.getElementById("progressBar");if(i.style.width=Math.floor(100*e)+"%",e>=1){var r=R.createWave(),o=new Date;At("Generation time: "+(o.getTime()-n.getTime())/1e3+"s"),$("#modal-progress").modal("hide"),t(r)}})},Nt=function(){Xt.css("opacity",0),qt(),P&&(P.pause(),k.reset())},Pt=-1,kt=0,$t=0,Rt=0,Bt=0,Ft=!1,Mt=0,Ut=0,jt=function(t,e){for(var n=44100*t/N.rowLen,i=Math.floor(n),r=Math.floor(i/N.patternLen)+kt,o=i%N.patternLen,s=0;s<N.patternLen;++s){for(var a=r,l=o-s;0>l;){if(--a,kt>a)return-1;l+=N.patternLen}for(var c=N.songData[e].p[a]-1,u=0;4>u;u++)if(c>=0&&N.songData[e].c[c].n[l+u*N.patternLen]>0)return(s+(n-i))*N.rowLen}return-1},Xt=$(".led"),Vt=function(t){var e=0,n=0;if(Ft&&t>=0){var i,r,o,s=R.getData(t,1e3),a=0,l=0,c=0,u=0;for(i=1;i<s.length;i+=2)r=s[i-1],o=s[i],a=.8*r+.1*a-.3*c,l=.8*o+.1*l-.3*u,c=r,u=o,e+=a*a,n+=l*l;e=.2*Math.sqrt(e/s.length)+.8*Mt,n=.2*Math.sqrt(n/s.length)+.8*Ut,Mt=e,Ut=n}for(Xe.css("width",Math.min(Math.floor(100*e*5),100)+"%"),Ve.css("width",Math.min(Math.floor(100*n*5),100)+"%"),i=0;8>i;++i)if(i>=Rt&&Bt>=i){var d=N.songData[i].i[CSong.instProps.ENV_ATTACK],f=N.songData[i].i[CSong.instProps.ENV_SUSTAIN],h=N.songData[i].i[CSong.instProps.ENV_RELEASE];d=d*d*4,h=f*f*4+h*h*4;var p=d+h;1e4>p&&(p=1e4,h=p-d);var g=jt(t,i);if(g>=0&&p>g){var m;m=d>g?g/d:1-(g-d)/h,Xt.eq(i).css("opacity",m)}}},Yt=function(){if(null!=P){var t,e,n=k.currentTime();if(P.ended||P.duration&&P.duration-n<.1)return qt(),m=0,y=0,K(),T=0,C=0,void Z();var i=Math.floor(44100*n/N.rowLen),r=Math.floor(i/N.patternLen)+kt,o=i%N.patternLen,s=r!=w,a=s||o!=m;if(s)for(r>=0&&(w=r,x=r,J(!0,!0)),t=0;d>t;++t)e=document.getElementById("spr"+t),e.className=t==r?"playpos":"";if(a)for(o>=0&&(m=o,y=o,K(!0,!s),T=o,C=o,Z(!0,!s)),t=0;t<N.patternLen;++t)e=document.getElementById("ppr"+t),e.className=t==o?"playpos":"";Vt(n)}},Ht=function(){w=kt,x=kt,E=b,J(!0,!0),K(),Z(),Ft=!0,Pt=setInterval(Yt,16)},qt=function(){if(Ft){-1!==Pt&&(clearInterval(Pt),Pt=-1);var t;for(t=0;d>t;++t)document.getElementById("spr"+t).className="";for(t=0;t<N.patternLen;++t)document.getElementById("ppr"+t).className="";Vt(-1),Ft=!1}},Wt=function(t){t=t||window.event,t.preventDefault(),Nt(),gt(),kt=0,$t=N.endPattern-2,Rt=0,Bt=7;var e=function(t){if(null==P)return void alert("Audio element unavailable.");try{Ht(),P.src=URL.createObjectURL(new Blob([t],{type:"audio/wav"})),k.reset(),P.play()}catch(e){alert("Error playing: "+e.message)}};Lt(e)},zt=function(t){t=t||window.event,t.preventDefault(),Nt(),gt();var e={firstRow:w,lastRow:x,firstCol:b,lastCol:E};kt=w,$t=x,Rt=b,Bt=E;var n=function(t){if(null==P)return void alert("Audio element unavailable.");try{Ht(),P.src=URL.createObjectURL(new Blob([t],{type:"audio/wav"})),P.play(),k.reset()}catch(e){alert("Error playing: "+e.message)}};Lt(n,e)},Qt=function(t){return t=t||window.event,t.preventDefault(),null==P?void alert("Audio element unavailable."):void Nt()},Gt=function(t){return Q(a),!0},Jt=function(t){return Q(a),!0},Kt=function(t){return Q(a),!0},Zt=function(t){if(t=t||window.event,t.preventDefault(),b==E){L=[];for(var e=N.songData[b],n=0;n<=e.i.length;++n)L[n]=e.i[n]}},te=function(t){if(t=t||window.event,t.preventDefault(),b==E&&L.length>0){var e=N.songData[b];e.i=[];for(var n=0;n<=L.length;++n)e.i[n]=L[n]}dt(!0)},ee=function(t){if(t=t||window.event,t.preventDefault(),w==x&&b==E){var e=N.songData[b].p[w]-1;if(e>=0){O=[];for(var n=m;y>=n;++n){for(var i=[],r=g;v>=r;++r)i.push(N.songData[b].c[e].n[n+r*N.patternLen]);O.push(i)}}}},ne=function(t){if(t=t||window.event,t.preventDefault(),w==x&&b==E){var e=N.songData[b].p[w]-1;if(e>=0){for(var n=m,i=0;n<N.patternLen&&i<O.length;++n,++i)for(var r=g,o=0;4>r&&o<O[i].length;++r,++o)N.songData[b].c[e].n[n+r*N.patternLen]=O[i][o];K()}}},ie=function(t){if(t=t||window.event,t.preventDefault(),w==x&&b==E){var e=N.songData[b].p[w]-1;if(e>=0){for(var n=m;y>=n;++n)for(var i=g;v>=i;++i){var r=N.songData[b].c[e].n[n+i*N.patternLen];r>0&&(N.songData[b].c[e].n[n+i*N.patternLen]=r+1)}K()}}},re=function(t){if(t=t||window.event,t.preventDefault(),w==x&&b==E){var e=N.songData[b].p[w]-1;if(e>=0){for(var n=m;y>=n;++n)for(var i=g;v>=i;++i){var r=N.songData[b].c[e].n[n+i*N.patternLen];r>1&&(N.songData[b].c[e].n[n+i*N.patternLen]=r-1)}K()}}},oe=function(t){if(t=t||window.event,t.preventDefault(),w==x&&b==E){var e=N.songData[b].p[w]-1;if(e>=0){for(var n=m;y>=n;++n)for(var i=g;v>=i;++i){var r=N.songData[b].c[e].n[n+i*N.patternLen];r>0&&(N.songData[b].c[e].n[n+i*N.patternLen]=r+12)}K()}}},se=function(t){if(t=t||window.event,t.preventDefault(),w==x&&b==E){var e=N.songData[b].p[w]-1;if(e>=0){for(var n=m;y>=n;++n)for(var i=g;v>=i;++i){var r=N.songData[b].c[e].n[n+i*N.patternLen];r>12&&(N.songData[b].c[e].n[n+i*N.patternLen]=r-12)}K()}}},ae=function(t){t=t||window.event,t.preventDefault(),D=[];for(var e=w;x>=e;++e){for(var n=[],i=b;E>=i;++i)n.push(N.songData[i].p[e]);D.push(n)}},le=function(t){t=t||window.event,t.preventDefault();for(var e=w,n=0;d>e&&n<D.length;++e,++n)for(var i=b,r=0;8>i&&r<D[n].length;++i,++r)N.songData[i].p[e]=D[n][r];J()},ce=function(t){t=t||window.event,t.preventDefault();for(var e=w;x>=e;++e)for(var n=b;E>=n;++n){var i=N.songData[n].p[e];f>i&&(N.songData[n].p[e]=i+1)}J(),K(),Z()},ue=function(t){t=t||window.event,t.preventDefault();for(var e=w;x>=e;++e)for(var n=b;E>=n;++n){var i=N.songData[n].p[e];i>0&&(N.songData[n].p[e]=i-1)}J(),K(),Z()},de=function(t){if(t=t||window.event,t.preventDefault(),w==x&&b==E){var e=N.songData[b].p[w]-1;if(e>=0){A=[];for(var n=T;C>=n;++n){var i=[];i.push(N.songData[b].c[e].f[n]),i.push(N.songData[b].c[e].f[n+N.patternLen]),A.push(i)}}}},fe=function(t){if(t=t||window.event,t.preventDefault(),w==x&&b==E){var e=N.songData[b].p[w]-1;if(e>=0){for(var n=T,i=0;n<N.patternLen&&i<A.length;++n,++i){var r=A[i];N.songData[b].c[e].f[n]=r[0],N.songData[b].c[e].f[n+N.patternLen]=r[1]}Z()}}},he=function(t){if(t=t||window.event,t.preventDefault(),b==E){var e=CUtil.getEventElement(t),n=-1;"osc1_xenv"===e.id?n=CSong.instProps.OSC1_XENV:"osc2_xenv"===e.id?n=CSong.instProps.OSC2_XENV:"lfo_fxfreq"===e.id&&(n=CSong.instProps.LFO_FX_FREQ);var i;if(n>=0&&(i=+$(e).is(":checked"),N.songData[b].i[n]=i),h==u&&w==x&&T==C&&n){var r=N.songData[b].p[w]-1;r>=0&&(N.songData[b].c[r].f[T]=n+1,N.songData[b].c[r].f[T+N.patternLen]=i,Z())}dt(!0),z()}},pe=function(t){if(t=t||window.event,t.preventDefault(),b==E){var e=t.currentTarget.value;if(h==u&&w==x&&T==C){var n=N.songData[b].p[w]-1;n>=0&&(N.songData[b].c[n].f[T]=CSong.instProps.OSC1_WAVEFORM+1,N.songData[b].c[n].f[T+N.patternLen]=e,Z())}N.songData[b].i[CSong.instProps.OSC1_WAVEFORM]=e,dt(),z()}},ge=function(t){if(t=t||window.event,t.preventDefault(),b==E){var e=t.currentTarget.value;if(h==u&&w==x&&T==C){var n=N.songData[b].p[w]-1;n>=0&&(N.songData[b].c[n].f[T]=CSong.instProps.OSC2_WAVEFORM+1,N.songData[b].c[n].f[T+N.patternLen]=e,Z())}N.songData[b].i[CSong.instProps.OSC2_WAVEFORM]=e,dt(!0),z()}},me=function(t){if(t=t||window.event,t.preventDefault(),b==E){var e=t.currentTarget.value;if(h==u&&w==x&&T==C){var n=N.songData[b].p[w]-1;n>=0&&(N.songData[b].c[n].f[T]=CSong.instProps.LFO_WAVEFORM+1,N.songData[b].c[n].f[T+N.patternLen]=e,Z())}N.songData[b].i[CSong.instProps.LFO_WAVEFORM]=e,dt(!0),z()}},ve=function(t){if(t=t||window.event,t.preventDefault(),b==E){var e=t.currentTarget.value;if(h==u&&w==x&&T==C){var n=N.songData[b].p[w]-1;n>=0&&(N.songData[b].c[n].f[T]=CSong.instProps.FX_FILTER+1,N.songData[b].c[n].f[T+N.patternLen]=e,Z())}N.songData[b].i[CSong.instProps.FX_FILTER]=e,dt(!0),z()}},ye=function(t){t=t||window.event,t.preventDefault(),8>p&&(p++,$("#keyboardOctave").text(p))},be=function(t){t=t||window.event,t.preventDefault(),p>1&&(p--,$("#keyboardOctave").text(p))},we=function(t){if(t=t||window.event,t.preventDefault(),b==E){var e=CUtil.getEventElement(t),n=e.options[e.selectedIndex].value;if(""!==n&&(n=parseInt(n))){for(var i=gInstrumentPresets[n],r=0;r<i.i.length;++r)N.songData[b].i[r]=i.i[r];dt(!1)}}},Ee=function(t){t=t||window.event;var e=CUtil.getMousePos(t,!0),n=0;if(e[1]<68)for(var i=0;i<M.length;i+=2)if(e[0]>=M[i]-10&&e[0]<=M[i]+10){n=M[i+1];break}if(!n){n=2*Math.floor(14*e[0]/420);var r=0;n>=20&&r++,n>=14&&r++,n>=6&&r++,n-=r}st(n+12*p)&&t.preventDefault()},xe=function(t){if(t=t||window.event,t.preventDefault(),!Ft){var e=CUtil.getEventElement(t),n=parseInt(e.id.slice(3));rt(n),I=!0}Q(u)},Te=function(t){if(I){t=t||window.event,t.preventDefault();var e=CUtil.getEventElement(t),n=parseInt(e.id.slice(3));ot(n)}},Ce=function(t){if(I){t=t||window.event,t.preventDefault();var e=CUtil.getEventElement(t),n=parseInt(e.id.slice(3));ot(n),I=!1}},Se=function(t){if(t=t||window.event,t.preventDefault(),!Ft){var e=CUtil.getEventElement(t),n=parseInt(e.id.slice(2,3)),i=parseInt(e.id.slice(4));tt(n,i),_=!0}Q(c)},_e=function(t){if(_){t=t||window.event,t.preventDefault();var e=CUtil.getEventElement(t),n=parseInt(e.id.slice(2,3)),i=parseInt(e.id.slice(4));et(n,i)}},Ie=function(t){if(_){t=t||window.event,t.preventDefault();var e=CUtil.getEventElement(t),n=parseInt(e.id.slice(2,3)),i=parseInt(e.id.slice(4));et(n,i),_=!1}},De=function(t){t=t||window.event,t.preventDefault();var e,n=CUtil.getEventElement(t),i=parseInt(n.id.slice(2,3));e=Ft?w:parseInt(n.id.slice(4));var r=i!=b||b!=E;nt(i,e),Ft||(S=!0),Q(l),K(),Z(),dt(r)},Oe=function(t){if(S){t=t||window.event,t.preventDefault();var e=CUtil.getEventElement(t),n=parseInt(e.id.slice(2,3)),i=parseInt(e.id.slice(4));it(n,i),K(),Z(),dt(!0)}},Ae=function(t){if(S){t=t||window.event,t.preventDefault();var e=CUtil.getEventElement(t),n=parseInt(e.id.slice(2,3)),i=parseInt(e.id.slice(4)),r=n!=E||b!=E;it(n,i),S=!1,K(),Z(),dt(r)}},Le=function(t){b==E&&(t=t||window.event,Pe($(t.currentTarget)),z())},Ne={osc1_vol:{min:0,max:255,cmd:CSong.instProps.OSC1_VOL},osc1_semi:{min:92,max:164,cmd:CSong.instProps.OSC1_SEMI},osc2_vol:{min:0,max:255,cmd:CSong.instProps.OSC2_VOL},osc2_semi:{min:92,max:164,cmd:CSong.instProps.OSC2_SEMI},osc2_det:{min:0,max:255,cmd:CSong.instProps.OSC2_DETUNE,nonLinear:!0},noise_vol:{min:0,max:255,cmd:CSong.instProps.NOISE_VOL},env_att:{min:0,max:255,cmd:CSong.instProps.ENV_ATTACK},env_sust:{min:0,max:255,cmd:CSong.instProps.ENV_SUSTAIN},env_rel:{min:0,max:255,cmd:CSong.instProps.ENV_RELEASE},lfo_amt:{min:0,max:255,cmd:CSong.instProps.LFO_AMT},lfo_freq:{min:0,max:16,cmd:CSong.instProps.LFO_FREQ},fx_freq:{min:0,max:255,cmd:CSong.instProps.FX_FREQ,nonLinear:!0},fx_res:{min:0,max:254,cmd:CSong.instProps.FX_RESONANCE},fx_dist:{min:0,max:255,cmd:CSong.instProps.FX_DIST,nonLinear:!0},fx_drive:{min:0,max:255,cmd:CSong.instProps.FX_DRIVE},fx_pan_amt:{min:0,max:255,cmd:CSong.instProps.FX_PAN_AMT},fx_pan_freq:{min:0,max:16,cmd:CSong.instProps.FX_PAN_FREQ},fx_dly_amt:{min:0,max:255,cmd:CSong.instProps.FX_DELAY_AMT},fx_dly_time:{min:0,max:16,cmd:CSong.instProps.FX_DELAY_TIME}},Pe=function(t){var e=t.val(),n=Ne[t.attr("id")];if(!n)throw new Error("Unknown slider");n.nonLinear&&(e*=e);var i=Ne[t.attr("id")].cmd,r=N.songData[b];if(h==u&&T==C&&w==x&&b==E){var o=N.songData[b].p[w]-1;o>=0&&(N.songData[b].c[o].f[T]=i+1,N.songData[b].c[o].f[T+N.patternLen]=e,Z())}i>=0&&(r.i[i]=e),B.updateInstr(r.i),ct()},ke=function(t){t=t||window.event;var e,n,i,r=document.activeElement===document.getElementById("bpm")||document.activeElement===document.getElementById("rpp");if(h==l&&b==E&&w==x){if(t.keyCode>=48&&t.keyCode<=57)return N.songData[b].p[w]=t.keyCode-47,J(),K(),Z(),!1;if(t.keyCode>=64&&t.keyCode<=90)return N.songData[b].p[w]=t.keyCode-54,J(),K(),Z(),!1}if(h!=l&&!r){switch(i=-1,t.keyCode){case 90:i=0;break;case 83:i=1;break;case 88:i=2;break;case 68:i=3;break;case 67:i=4;break;case 86:i=5;break;case 71:i=6;break;case 66:i=7;break;case 72:i=8;break;case 78:i=9;break;case 74:i=10;break;case 77:i=11;break;case 188:i=12;break;case 76:i=13;break;case 190:i=14;break;case 186:i=15;break;case 191:i=16;break;case 81:i=12;break;case 50:i=13;break;case 87:i=14;break;case 51:i=15;break;case 69:i=16;break;case 82:i=17;break;case 53:i=18;break;case 84:i=19;break;case 54:i=20;break;case 89:i=21;break;case 55:i=22;break;case 85:i=23;break;case 73:i=24;break;case 57:i=25;break;case 79:i=26;break;case 48:i=27;break;case 80:i=28}if(i>=0&&st(i+12*p))return!1}var o;switch(t.keyCode){case 39:if(h==l)return nt((b+1)%8,w),K(),Z(),dt(!0),!1;if(h==c)return tt((g+1)%4,m),!1;break;case 37:if(h==l)return nt((b-1+8)%8,w),K(),Z(),dt(!0),!1;if(h==c)return tt((g-1+4)%4,m),!1;break;case 40:if(h==l)return nt(b,(w+1)%d),K(),Z(),!1;if(h==c)return tt(g,(m+1)%N.patternLen),!1;if(h==u)return rt((T+1)%N.patternLen),!1;break;case 38:if(h==l)return nt(b,(w-1+d)%d),K(),Z(),!1;if(h==c)return tt(g,(m-1+N.patternLen)%N.patternLen),!1;if(h==u)return rt((T-1+N.patternLen)%N.patternLen),!1;break;case 36:if(h==l)return nt(b,0),K(),Z(),!1;if(h==c)return tt(g,0),!1;if(h==u)return rt(0),!1;break;case 35:if(h==l)return nt(b,d-1),K(),Z(),!1;if(h==c)return tt(g,N.patternLen-1),!1;if(h==u)return rt(N.patternLen-1),!1;break;case 32:if(h!=a)return zt(t),!1;break;case 8:case 46:if(h==l){for(e=w;x>=e;++e)for(n=b;E>=n;++n)N.songData[n].p[e]=0;return J(),K(),Z(),!1}if(h==c){if(w==x&&b==E){if(o=N.songData[b].p[w]-1,o>=0){for(e=m;y>=e;++e)for(n=g;v>=n;++n)N.songData[b].c[o].n[e+n*N.patternLen]=0;m==y&&tt(g,(m+1)%N.patternLen),K()}return!1}}else if(h==u&&w==x&&b==E){if(o=N.songData[b].p[w]-1,o>=0){for(e=T;C>=e;++e)N.songData[b].c[o].f[e]=0,N.songData[b].c[o].f[e+N.patternLen]=0;T==C&&rt((T+1)%N.patternLen),Z()}return!1}break;case 13:r&&(ft(),pt(),document.getElementById("bpm").blur(),document.getElementById("rpp").blur())}return!0},$e=function(t){t=t||window.event,t.stopPropagation(),t.preventDefault();var e=t.dataTransfer.files;if(e.length&&1!=e.length)return void alert("Only open one file at a time.");var n=e[0],i=new FileReader;i.onload=function(t){vt(CSong.getURLSongData(t.target.result))},i.readAsDataURL(n)},Re=function(){document.onmousedown=null,document.onkeydown=ke;var t=document.body.parentNode;t.addEventListener("dragenter",function(t){t.stopPropagation(),t.preventDefault()},!1),t.addEventListener("dragover",function(t){t.stopPropagation(),t.preventDefault()},!1),t.addEventListener("drop",$e,!1)},Be=function(){for(var t,e,n,i=document.getElementById("sequencer-table"),r=0;d>r;r++){t=document.createElement("tr"),r%4===0&&(t.className="beat"),e=document.createElement("th"),e.id="spr"+r,e.textContent=""+r,e.className="bar",t.appendChild(e);for(var o=0;8>o;o++)n=document.createElement("td"),n.id="sc"+o+"r"+r,n.textContent=" ",n.addEventListener("mousedown",De,!1),n.addEventListener("mouseover",Oe,!1),n.addEventListener("mouseup",Ae,!1),t.appendChild(n);i.appendChild(t)}},Fe=function(t){for(var e=1;e<t.children.length&&"beat"!==t.children[e].className;)e++;return e},Me=function(){var t=U(),e=4;return N.patternLen%3===0?e=3:N.patternLen%4===0?e=4:N.patternLen%2===0?e=2:N.patternLen%5===0&&(e=5),t/e>=40&&N.patternLen>24&&N.patternLen%(2*e)===0&&(e*=2),e},Ue=function(){var t=Me(),e=document.getElementById("pattern-table");if(e.children.length!==N.patternLen||Fe(e)!==t){for(;e.firstChild;)e.removeChild(e.firstChild);for(var n,i,r,o=0;o<N.patternLen;o++){n=document.createElement("tr"),o%t===0&&(n.className="beat"),i=document.createElement("th"),i.id="ppr"+o,i.textContent=""+o,n.appendChild(i);for(var s=0;4>s;s++)r=document.createElement("td"),r.id="pc"+s+"r"+o,r.textContent=" ",r.addEventListener("mousedown",Se,!1),r.addEventListener("mouseover",_e,!1),r.addEventListener("mouseup",Ie,!1),n.appendChild(r);e.appendChild(n)}}},je=function(){var t=Me(),e=document.getElementById("fxtrack-table");if(e.children.length!==N.patternLen||Fe(e)!==t){for(;e.firstChild;)e.removeChild(e.firstChild);for(var n,i,r=0;r<N.patternLen;r++)n=document.createElement("tr"),r%t===0&&(n.className="beat"),i=document.createElement("td"),i.id="fxr"+r,i.textContent=String.fromCharCode(160),i.addEventListener("mousedown",xe,!1),i.addEventListener("mouseover",Te,!1),i.addEventListener("mouseup",Ce,!1),n.appendChild(i),e.appendChild(n)}},Xe=$("#pan-left"),Ve=$("#pan-right");this.init=function(){$(".knob").knob({inline:!1,width:50,height:50,bgColor:"#2b3e50",fgColor:"#df691a",inputColor:"#ebebeb",angleOffset:-125,angleArc:250,cursor:10}),$("input[type=range]").rsSlider({}),e=CUtil.getURLBase(window.location.href),n=CUtil.parseURLGetData(window.location.href),W(),Be();try{P=new Audio,k.setAudioElement(P),P.addEventListener("canplay",function(){this.play()},!0)}catch(i){P=null}var r=CSong.getURLSongData(n&&n.data&&n.data[0]),o=r?CSong.binToSong(r):null;N=o?o:j(),G(),J(),K(),Z(),dt(!0),Q(c),nt(0,0),tt(0,0),$("#logo").on("click",Ct),$("#newSong").on("click",St),$("#openSong").on("click",_t),$("#openMidi").on("click",t),$("#saveSong").on("click",It),$("#exportJS").on("click",Ot),$("#exportWAV").on("click",Dt),$("#playSong").on("click",Wt),$("#playRange").on("click",zt),$("#stopPlaying").on("click",Qt),$("#about").on("click",Ct),document.getElementById("bpm").onfocus=Gt,document.getElementById("rpp").onfocus=Jt,document.getElementById("sequencerCopy").onmousedown=ae,document.getElementById("sequencerPaste").onmousedown=le,document.getElementById("sequencerPatUp").onmousedown=ce,document.getElementById("sequencerPatDown").onmousedown=ue,document.getElementById("patternCopy").onmousedown=ee,document.getElementById("patternPaste").onmousedown=ne,document.getElementById("patternNoteUp").onmousedown=ie,document.getElementById("patternNoteDown").onmousedown=re,document.getElementById("patternOctaveUp").onmousedown=oe,document.getElementById("patternOctaveDown").onmousedown=se,document.getElementById("fxCopy").onmousedown=de,document.getElementById("fxPaste").onmousedown=fe,document.getElementById("instrPreset").onfocus=Kt,document.getElementById("instrPreset").onchange=we,$("[name=osc1_wave]").on("change",pe),$("#osc1_vol").rsSlider("change",Le),$("#osc1_semi").rsSlider("change",Le),$("#osc1_xenv").on("change",he),$("[name=osc2_wave]").on("change",ge),$("#osc2_vol").rsSlider("change",Le),$("#osc2_semi").rsSlider("change",Le),$("#osc2_det").rsSlider("change",Le),$("#osc2_xenv").on("change",he),$("#noise_vol").rsSlider("change",Le),$("#env_att").rsSlider("change",Le),$("#env_sust").rsSlider("change",Le),$("#env_rel").rsSlider("change",Le),$("[name=lfo_wave]").on("change",me),$("#lfo_amt").rsSlider("change",Le),$("#lfo_freq").rsSlider("change",Le),$("#lfo_fxfreq").on("change",he),$("[name=fx_filt]").on("change",ve),$("#fx_freq").rsSlider("change",Le),$("#fx_res").rsSlider("change",Le),$("#fx_dly_amt").rsSlider("change",Le),$("#fx_dly_time").rsSlider("change",Le),$("#fx_pan_amt").rsSlider("change",Le),$("#fx_pan_freq").rsSlider("change",Le),$("#fx_dist").rsSlider("change",Le),$("#fx_drive").rsSlider("change",Le),document.getElementById("octaveDown").addEventListener("mousedown",be,!1),document.getElementById("octaveDown").addEventListener("touchstart",be,!1),document.getElementById("octaveUp").addEventListener("mousedown",ye,!1),document.getElementById("octaveUp").addEventListener("touchstart",ye,!1),
document.getElementById("keyboard").addEventListener("mousedown",Ee,!1),document.getElementById("keyboard").addEventListener("touchstart",Ee,!1),$("#instrCopy").on("click",Zt),$("#instrPaste").on("click",te),$("#open-song-button").on("click",bt),q(),Re(),r||Tt(),B.start(),B.updateRowLen(N.rowLen),$("body").addClass("loaded")}};$(function(){try{var t=new CGUI;t.init()}catch(e){alert("Unexpected error: "+e.message)}});
//# sourceMappingURL=data:application/json;base64,
